//  This file was automatically generated and should not be edited.

import AWSAppSync

public struct CreateImpossibleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, userId: String? = nil, ttime: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "userID": userId, "ttime": ttime, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: String? {
    get {
      return graphQLMap["userID"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var ttime: String? {
    get {
      return graphQLMap["ttime"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelImpossibleConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(userId: ModelStringInput? = nil, ttime: ModelStringInput? = nil, and: [ModelImpossibleConditionInput?]? = nil, or: [ModelImpossibleConditionInput?]? = nil, not: ModelImpossibleConditionInput? = nil) {
    graphQLMap = ["userID": userId, "ttime": ttime, "and": and, "or": or, "not": not]
  }

  public var userId: ModelStringInput? {
    get {
      return graphQLMap["userID"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var ttime: ModelStringInput? {
    get {
      return graphQLMap["ttime"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var and: [ModelImpossibleConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelImpossibleConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelImpossibleConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelImpossibleConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelImpossibleConditionInput? {
    get {
      return graphQLMap["not"] as! ModelImpossibleConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelStringInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: String? = nil, eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, contains: String? = nil, notContains: String? = nil, between: [String?]? = nil, beginsWith: String? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: String? {
    get {
      return graphQLMap["ne"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: String? {
    get {
      return graphQLMap["eq"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: String? {
    get {
      return graphQLMap["le"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: String? {
    get {
      return graphQLMap["lt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: String? {
    get {
      return graphQLMap["ge"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: String? {
    get {
      return graphQLMap["gt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: String? {
    get {
      return graphQLMap["contains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: String? {
    get {
      return graphQLMap["notContains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [String?]? {
    get {
      return graphQLMap["between"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: String? {
    get {
      return graphQLMap["beginsWith"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public enum ModelAttributeTypes: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case binary
  case binarySet
  case bool
  case list
  case map
  case number
  case numberSet
  case string
  case stringSet
  case null
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "binary": self = .binary
      case "binarySet": self = .binarySet
      case "bool": self = .bool
      case "list": self = .list
      case "map": self = .map
      case "number": self = .number
      case "numberSet": self = .numberSet
      case "string": self = .string
      case "stringSet": self = .stringSet
      case "_null": self = .null
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .binary: return "binary"
      case .binarySet: return "binarySet"
      case .bool: return "bool"
      case .list: return "list"
      case .map: return "map"
      case .number: return "number"
      case .numberSet: return "numberSet"
      case .string: return "string"
      case .stringSet: return "stringSet"
      case .null: return "_null"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: ModelAttributeTypes, rhs: ModelAttributeTypes) -> Bool {
    switch (lhs, rhs) {
      case (.binary, .binary): return true
      case (.binarySet, .binarySet): return true
      case (.bool, .bool): return true
      case (.list, .list): return true
      case (.map, .map): return true
      case (.number, .number): return true
      case (.numberSet, .numberSet): return true
      case (.string, .string): return true
      case (.stringSet, .stringSet): return true
      case (.null, .null): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct ModelSizeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }
}

public struct UpdateImpossibleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "userID": userId, "ttime": ttime, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: String? {
    get {
      return graphQLMap["userID"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var ttime: String? {
    get {
      return graphQLMap["ttime"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteImpossibleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateMyScheduleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "userID": userId, "scheduleID": scheduleId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var scheduleId: GraphQLID? {
    get {
      return graphQLMap["scheduleID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelMyScheduleConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(userId: ModelIDInput? = nil, scheduleId: ModelIDInput? = nil, and: [ModelMyScheduleConditionInput?]? = nil, or: [ModelMyScheduleConditionInput?]? = nil, not: ModelMyScheduleConditionInput? = nil) {
    graphQLMap = ["userID": userId, "scheduleID": scheduleId, "and": and, "or": or, "not": not]
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var scheduleId: ModelIDInput? {
    get {
      return graphQLMap["scheduleID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var and: [ModelMyScheduleConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMyScheduleConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMyScheduleConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMyScheduleConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMyScheduleConditionInput? {
    get {
      return graphQLMap["not"] as! ModelMyScheduleConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIDInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: GraphQLID? = nil, eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, contains: GraphQLID? = nil, notContains: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil, size: ModelSizeInput? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "attributeExists": attributeExists, "attributeType": attributeType, "size": size]
  }

  public var ne: GraphQLID? {
    get {
      return graphQLMap["ne"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: GraphQLID? {
    get {
      return graphQLMap["eq"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: GraphQLID? {
    get {
      return graphQLMap["le"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: GraphQLID? {
    get {
      return graphQLMap["lt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: GraphQLID? {
    get {
      return graphQLMap["ge"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: GraphQLID? {
    get {
      return graphQLMap["gt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: GraphQLID? {
    get {
      return graphQLMap["contains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: GraphQLID? {
    get {
      return graphQLMap["notContains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [GraphQLID?]? {
    get {
      return graphQLMap["between"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: GraphQLID? {
    get {
      return graphQLMap["beginsWith"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }

  public var size: ModelSizeInput? {
    get {
      return graphQLMap["size"] as! ModelSizeInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "size")
    }
  }
}

public struct UpdateMyScheduleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "userID": userId, "scheduleID": scheduleId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var scheduleId: GraphQLID? {
    get {
      return graphQLMap["scheduleID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteMyScheduleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateScheduleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var reservation: String? {
    get {
      return graphQLMap["Reservation"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Reservation")
    }
  }

  public var ttime: String? {
    get {
      return graphQLMap["ttime"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var time: Int? {
    get {
      return graphQLMap["time"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "time")
    }
  }

  public var book: String? {
    get {
      return graphQLMap["BOOK"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "BOOK")
    }
  }

  public var state: Int? {
    get {
      return graphQLMap["state"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelScheduleConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(reservation: ModelStringInput? = nil, ttime: ModelStringInput? = nil, time: ModelIntInput? = nil, book: ModelStringInput? = nil, state: ModelIntInput? = nil, and: [ModelScheduleConditionInput?]? = nil, or: [ModelScheduleConditionInput?]? = nil, not: ModelScheduleConditionInput? = nil) {
    graphQLMap = ["Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "and": and, "or": or, "not": not]
  }

  public var reservation: ModelStringInput? {
    get {
      return graphQLMap["Reservation"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Reservation")
    }
  }

  public var ttime: ModelStringInput? {
    get {
      return graphQLMap["ttime"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var time: ModelIntInput? {
    get {
      return graphQLMap["time"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "time")
    }
  }

  public var book: ModelStringInput? {
    get {
      return graphQLMap["BOOK"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "BOOK")
    }
  }

  public var state: ModelIntInput? {
    get {
      return graphQLMap["state"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelScheduleConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelScheduleConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelScheduleConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelScheduleConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelScheduleConditionInput? {
    get {
      return graphQLMap["not"] as! ModelScheduleConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelIntInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil, attributeExists: Bool? = nil, attributeType: ModelAttributeTypes? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "attributeExists": attributeExists, "attributeType": attributeType]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var attributeExists: Bool? {
    get {
      return graphQLMap["attributeExists"] as! Bool?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeExists")
    }
  }

  public var attributeType: ModelAttributeTypes? {
    get {
      return graphQLMap["attributeType"] as! ModelAttributeTypes?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "attributeType")
    }
  }
}

public enum MessageStatus: RawRepresentable, Equatable, JSONDecodable, JSONEncodable {
  public typealias RawValue = String
  case sent
  case delivered
  case read
  /// Auto generated constant for unknown enum values
  case unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "SENT": self = .sent
      case "DELIVERED": self = .delivered
      case "READ": self = .read
      default: self = .unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .sent: return "SENT"
      case .delivered: return "DELIVERED"
      case .read: return "READ"
      case .unknown(let value): return value
    }
  }

  public static func == (lhs: MessageStatus, rhs: MessageStatus) -> Bool {
    switch (lhs, rhs) {
      case (.sent, .sent): return true
      case (.delivered, .delivered): return true
      case (.read, .read): return true
      case (.unknown(let lhsValue), .unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }
}

public struct UpdateScheduleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var reservation: String? {
    get {
      return graphQLMap["Reservation"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Reservation")
    }
  }

  public var ttime: String? {
    get {
      return graphQLMap["ttime"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var time: Int? {
    get {
      return graphQLMap["time"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "time")
    }
  }

  public var book: String? {
    get {
      return graphQLMap["BOOK"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "BOOK")
    }
  }

  public var state: Int? {
    get {
      return graphQLMap["state"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteScheduleInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateQuestionnarieInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var content: String? {
    get {
      return graphQLMap["content"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var q1: String? {
    get {
      return graphQLMap["Q1"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q1")
    }
  }

  public var q2: String? {
    get {
      return graphQLMap["Q2"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q2")
    }
  }

  public var q3: String? {
    get {
      return graphQLMap["Q3"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q3")
    }
  }

  public var q4: String? {
    get {
      return graphQLMap["Q4"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q4")
    }
  }

  public var q5: String? {
    get {
      return graphQLMap["Q5"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q5")
    }
  }

  public var q6: String? {
    get {
      return graphQLMap["Q6"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q6")
    }
  }

  public var q7: [String?]? {
    get {
      return graphQLMap["Q7"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q7")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: GraphQLID? {
    get {
      return graphQLMap["chatroomID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var state: Int? {
    get {
      return graphQLMap["state"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelQuestionnarieConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(content: ModelStringInput? = nil, q1: ModelStringInput? = nil, q2: ModelStringInput? = nil, q3: ModelStringInput? = nil, q4: ModelStringInput? = nil, q5: ModelStringInput? = nil, q6: ModelStringInput? = nil, q7: ModelStringInput? = nil, userId: ModelIDInput? = nil, chatroomId: ModelIDInput? = nil, state: ModelIntInput? = nil, and: [ModelQuestionnarieConditionInput?]? = nil, or: [ModelQuestionnarieConditionInput?]? = nil, not: ModelQuestionnarieConditionInput? = nil) {
    graphQLMap = ["content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "and": and, "or": or, "not": not]
  }

  public var content: ModelStringInput? {
    get {
      return graphQLMap["content"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var q1: ModelStringInput? {
    get {
      return graphQLMap["Q1"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q1")
    }
  }

  public var q2: ModelStringInput? {
    get {
      return graphQLMap["Q2"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q2")
    }
  }

  public var q3: ModelStringInput? {
    get {
      return graphQLMap["Q3"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q3")
    }
  }

  public var q4: ModelStringInput? {
    get {
      return graphQLMap["Q4"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q4")
    }
  }

  public var q5: ModelStringInput? {
    get {
      return graphQLMap["Q5"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q5")
    }
  }

  public var q6: ModelStringInput? {
    get {
      return graphQLMap["Q6"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q6")
    }
  }

  public var q7: ModelStringInput? {
    get {
      return graphQLMap["Q7"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q7")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: ModelIDInput? {
    get {
      return graphQLMap["chatroomID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var state: ModelIntInput? {
    get {
      return graphQLMap["state"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelQuestionnarieConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelQuestionnarieConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelQuestionnarieConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelQuestionnarieConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelQuestionnarieConditionInput? {
    get {
      return graphQLMap["not"] as! ModelQuestionnarieConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateQuestionnarieInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var content: String? {
    get {
      return graphQLMap["content"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var q1: String? {
    get {
      return graphQLMap["Q1"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q1")
    }
  }

  public var q2: String? {
    get {
      return graphQLMap["Q2"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q2")
    }
  }

  public var q3: String? {
    get {
      return graphQLMap["Q3"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q3")
    }
  }

  public var q4: String? {
    get {
      return graphQLMap["Q4"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q4")
    }
  }

  public var q5: String? {
    get {
      return graphQLMap["Q5"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q5")
    }
  }

  public var q6: String? {
    get {
      return graphQLMap["Q6"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q6")
    }
  }

  public var q7: [String?]? {
    get {
      return graphQLMap["Q7"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q7")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: GraphQLID? {
    get {
      return graphQLMap["chatroomID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var state: Int? {
    get {
      return graphQLMap["state"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteQuestionnarieInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateChatRoomInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, newMessages: Int? = nil, name: String? = nil, state: String? = nil, version: Int? = nil, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "newMessages": newMessages, "name": name, "state": state, "_version": version, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var newMessages: Int? {
    get {
      return graphQLMap["newMessages"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newMessages")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var state: String? {
    get {
      return graphQLMap["state"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var chatRoomLastMessageId: GraphQLID? {
    get {
      return graphQLMap["chatRoomLastMessageId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomLastMessageId")
    }
  }

  public var chatRoomScheduleId: GraphQLID? {
    get {
      return graphQLMap["chatRoomScheduleId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomScheduleId")
    }
  }
}

public struct ModelChatRoomConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(newMessages: ModelIntInput? = nil, name: ModelStringInput? = nil, state: ModelStringInput? = nil, and: [ModelChatRoomConditionInput?]? = nil, or: [ModelChatRoomConditionInput?]? = nil, not: ModelChatRoomConditionInput? = nil, chatRoomLastMessageId: ModelIDInput? = nil, chatRoomScheduleId: ModelIDInput? = nil) {
    graphQLMap = ["newMessages": newMessages, "name": name, "state": state, "and": and, "or": or, "not": not, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId]
  }

  public var newMessages: ModelIntInput? {
    get {
      return graphQLMap["newMessages"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newMessages")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var state: ModelStringInput? {
    get {
      return graphQLMap["state"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelChatRoomConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelChatRoomConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelChatRoomConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelChatRoomConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelChatRoomConditionInput? {
    get {
      return graphQLMap["not"] as! ModelChatRoomConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var chatRoomLastMessageId: ModelIDInput? {
    get {
      return graphQLMap["chatRoomLastMessageId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomLastMessageId")
    }
  }

  public var chatRoomScheduleId: ModelIDInput? {
    get {
      return graphQLMap["chatRoomScheduleId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomScheduleId")
    }
  }
}

public struct UpdateChatRoomInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, state: String? = nil, version: Int? = nil, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
    graphQLMap = ["id": id, "newMessages": newMessages, "name": name, "state": state, "_version": version, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var newMessages: Int? {
    get {
      return graphQLMap["newMessages"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newMessages")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var state: String? {
    get {
      return graphQLMap["state"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }

  public var chatRoomLastMessageId: GraphQLID? {
    get {
      return graphQLMap["chatRoomLastMessageId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomLastMessageId")
    }
  }

  public var chatRoomScheduleId: GraphQLID? {
    get {
      return graphQLMap["chatRoomScheduleId"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomScheduleId")
    }
  }
}

public struct DeleteChatRoomInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateMessageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var image: String? {
    get {
      return graphQLMap["image"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "image")
    }
  }

  public var status: MessageStatus? {
    get {
      return graphQLMap["status"] as! MessageStatus?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var content: String? {
    get {
      return graphQLMap["content"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: GraphQLID? {
    get {
      return graphQLMap["chatroomID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelMessageConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(image: ModelStringInput? = nil, status: ModelMessageStatusInput? = nil, content: ModelStringInput? = nil, userId: ModelIDInput? = nil, chatroomId: ModelIDInput? = nil, and: [ModelMessageConditionInput?]? = nil, or: [ModelMessageConditionInput?]? = nil, not: ModelMessageConditionInput? = nil) {
    graphQLMap = ["image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "and": and, "or": or, "not": not]
  }

  public var image: ModelStringInput? {
    get {
      return graphQLMap["image"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "image")
    }
  }

  public var status: ModelMessageStatusInput? {
    get {
      return graphQLMap["status"] as! ModelMessageStatusInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var content: ModelStringInput? {
    get {
      return graphQLMap["content"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: ModelIDInput? {
    get {
      return graphQLMap["chatroomID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var and: [ModelMessageConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMessageConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMessageConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMessageConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMessageConditionInput? {
    get {
      return graphQLMap["not"] as! ModelMessageConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelMessageStatusInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(eq: MessageStatus? = nil, ne: MessageStatus? = nil) {
    graphQLMap = ["eq": eq, "ne": ne]
  }

  public var eq: MessageStatus? {
    get {
      return graphQLMap["eq"] as! MessageStatus?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var ne: MessageStatus? {
    get {
      return graphQLMap["ne"] as! MessageStatus?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }
}

public struct UpdateMessageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var image: String? {
    get {
      return graphQLMap["image"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "image")
    }
  }

  public var status: MessageStatus? {
    get {
      return graphQLMap["status"] as! MessageStatus?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var content: String? {
    get {
      return graphQLMap["content"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: GraphQLID? {
    get {
      return graphQLMap["chatroomID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteMessageInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, state: Int? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var patientNumber: String? {
    get {
      return graphQLMap["patientNumber"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "patientNumber")
    }
  }

  public var phoneNumber: String? {
    get {
      return graphQLMap["phoneNumber"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNumber")
    }
  }

  public var email: String? {
    get {
      return graphQLMap["email"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var status: String? {
    get {
      return graphQLMap["status"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var lastOnlineAt: Int? {
    get {
      return graphQLMap["lastOnlineAt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastOnlineAt")
    }
  }

  public var state: Int? {
    get {
      return graphQLMap["state"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var sex: String? {
    get {
      return graphQLMap["sex"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sex")
    }
  }

  public var born: String? {
    get {
      return graphQLMap["born"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "born")
    }
  }

  public var phoneNok: String? {
    get {
      return graphQLMap["phoneNOK"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNOK")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelUserConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(name: ModelStringInput? = nil, patientNumber: ModelStringInput? = nil, phoneNumber: ModelStringInput? = nil, email: ModelStringInput? = nil, status: ModelStringInput? = nil, lastOnlineAt: ModelIntInput? = nil, state: ModelIntInput? = nil, sex: ModelStringInput? = nil, born: ModelStringInput? = nil, phoneNok: ModelStringInput? = nil, and: [ModelUserConditionInput?]? = nil, or: [ModelUserConditionInput?]? = nil, not: ModelUserConditionInput? = nil) {
    graphQLMap = ["name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "and": and, "or": or, "not": not]
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var patientNumber: ModelStringInput? {
    get {
      return graphQLMap["patientNumber"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "patientNumber")
    }
  }

  public var phoneNumber: ModelStringInput? {
    get {
      return graphQLMap["phoneNumber"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNumber")
    }
  }

  public var email: ModelStringInput? {
    get {
      return graphQLMap["email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var status: ModelStringInput? {
    get {
      return graphQLMap["status"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var lastOnlineAt: ModelIntInput? {
    get {
      return graphQLMap["lastOnlineAt"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastOnlineAt")
    }
  }

  public var state: ModelIntInput? {
    get {
      return graphQLMap["state"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var sex: ModelStringInput? {
    get {
      return graphQLMap["sex"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sex")
    }
  }

  public var born: ModelStringInput? {
    get {
      return graphQLMap["born"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "born")
    }
  }

  public var phoneNok: ModelStringInput? {
    get {
      return graphQLMap["phoneNOK"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNOK")
    }
  }

  public var and: [ModelUserConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserConditionInput? {
    get {
      return graphQLMap["not"] as! ModelUserConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, state: Int? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: String? {
    get {
      return graphQLMap["name"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var patientNumber: String? {
    get {
      return graphQLMap["patientNumber"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "patientNumber")
    }
  }

  public var phoneNumber: String? {
    get {
      return graphQLMap["phoneNumber"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNumber")
    }
  }

  public var email: String? {
    get {
      return graphQLMap["email"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var status: String? {
    get {
      return graphQLMap["status"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var lastOnlineAt: Int? {
    get {
      return graphQLMap["lastOnlineAt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastOnlineAt")
    }
  }

  public var state: Int? {
    get {
      return graphQLMap["state"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var sex: String? {
    get {
      return graphQLMap["sex"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sex")
    }
  }

  public var born: String? {
    get {
      return graphQLMap["born"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "born")
    }
  }

  public var phoneNok: String? {
    get {
      return graphQLMap["phoneNOK"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNOK")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateScheduleUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, scheduleId: GraphQLID, userId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "scheduleID": scheduleId, "userID": userId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var scheduleId: GraphQLID {
    get {
      return graphQLMap["scheduleID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var userId: GraphQLID {
    get {
      return graphQLMap["userID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelScheduleUserConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(scheduleId: ModelIDInput? = nil, userId: ModelIDInput? = nil, and: [ModelScheduleUserConditionInput?]? = nil, or: [ModelScheduleUserConditionInput?]? = nil, not: ModelScheduleUserConditionInput? = nil) {
    graphQLMap = ["scheduleID": scheduleId, "userID": userId, "and": and, "or": or, "not": not]
  }

  public var scheduleId: ModelIDInput? {
    get {
      return graphQLMap["scheduleID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var and: [ModelScheduleUserConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelScheduleUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelScheduleUserConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelScheduleUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelScheduleUserConditionInput? {
    get {
      return graphQLMap["not"] as! ModelScheduleUserConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateScheduleUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, scheduleId: GraphQLID? = nil, userId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "scheduleID": scheduleId, "userID": userId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var scheduleId: GraphQLID? {
    get {
      return graphQLMap["scheduleID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteScheduleUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct CreateChatRoomUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID? = nil, chatRoomId: GraphQLID, userId: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "chatRoomID": chatRoomId, "userID": userId, "_version": version]
  }

  public var id: GraphQLID? {
    get {
      return graphQLMap["id"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var chatRoomId: GraphQLID {
    get {
      return graphQLMap["chatRoomID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomID")
    }
  }

  public var userId: GraphQLID {
    get {
      return graphQLMap["userID"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelChatRoomUserConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(chatRoomId: ModelIDInput? = nil, userId: ModelIDInput? = nil, and: [ModelChatRoomUserConditionInput?]? = nil, or: [ModelChatRoomUserConditionInput?]? = nil, not: ModelChatRoomUserConditionInput? = nil) {
    graphQLMap = ["chatRoomID": chatRoomId, "userID": userId, "and": and, "or": or, "not": not]
  }

  public var chatRoomId: ModelIDInput? {
    get {
      return graphQLMap["chatRoomID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomID")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var and: [ModelChatRoomUserConditionInput?]? {
    get {
      return graphQLMap["and"] as! [ModelChatRoomUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelChatRoomUserConditionInput?]? {
    get {
      return graphQLMap["or"] as! [ModelChatRoomUserConditionInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelChatRoomUserConditionInput? {
    get {
      return graphQLMap["not"] as! ModelChatRoomUserConditionInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct UpdateChatRoomUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, chatRoomId: GraphQLID? = nil, userId: GraphQLID? = nil, version: Int? = nil) {
    graphQLMap = ["id": id, "chatRoomID": chatRoomId, "userID": userId, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var chatRoomId: GraphQLID? {
    get {
      return graphQLMap["chatRoomID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomID")
    }
  }

  public var userId: GraphQLID? {
    get {
      return graphQLMap["userID"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct DeleteChatRoomUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: GraphQLID, version: Int? = nil) {
    graphQLMap = ["id": id, "_version": version]
  }

  public var id: GraphQLID {
    get {
      return graphQLMap["id"] as! GraphQLID
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var version: Int? {
    get {
      return graphQLMap["_version"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "_version")
    }
  }
}

public struct ModelImpossibleFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, userId: ModelStringInput? = nil, ttime: ModelStringInput? = nil, and: [ModelImpossibleFilterInput?]? = nil, or: [ModelImpossibleFilterInput?]? = nil, not: ModelImpossibleFilterInput? = nil) {
    graphQLMap = ["id": id, "userID": userId, "ttime": ttime, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: ModelStringInput? {
    get {
      return graphQLMap["userID"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var ttime: ModelStringInput? {
    get {
      return graphQLMap["ttime"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var and: [ModelImpossibleFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelImpossibleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelImpossibleFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelImpossibleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelImpossibleFilterInput? {
    get {
      return graphQLMap["not"] as! ModelImpossibleFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelMyScheduleFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, userId: ModelIDInput? = nil, scheduleId: ModelIDInput? = nil, and: [ModelMyScheduleFilterInput?]? = nil, or: [ModelMyScheduleFilterInput?]? = nil, not: ModelMyScheduleFilterInput? = nil) {
    graphQLMap = ["id": id, "userID": userId, "scheduleID": scheduleId, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var scheduleId: ModelIDInput? {
    get {
      return graphQLMap["scheduleID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var and: [ModelMyScheduleFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMyScheduleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMyScheduleFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMyScheduleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMyScheduleFilterInput? {
    get {
      return graphQLMap["not"] as! ModelMyScheduleFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelScheduleFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, reservation: ModelStringInput? = nil, ttime: ModelStringInput? = nil, time: ModelIntInput? = nil, book: ModelStringInput? = nil, state: ModelIntInput? = nil, and: [ModelScheduleFilterInput?]? = nil, or: [ModelScheduleFilterInput?]? = nil, not: ModelScheduleFilterInput? = nil) {
    graphQLMap = ["id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var reservation: ModelStringInput? {
    get {
      return graphQLMap["Reservation"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Reservation")
    }
  }

  public var ttime: ModelStringInput? {
    get {
      return graphQLMap["ttime"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var time: ModelIntInput? {
    get {
      return graphQLMap["time"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "time")
    }
  }

  public var book: ModelStringInput? {
    get {
      return graphQLMap["BOOK"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "BOOK")
    }
  }

  public var state: ModelIntInput? {
    get {
      return graphQLMap["state"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelScheduleFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelScheduleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelScheduleFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelScheduleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelScheduleFilterInput? {
    get {
      return graphQLMap["not"] as! ModelScheduleFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelQuestionnarieFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, content: ModelStringInput? = nil, q1: ModelStringInput? = nil, q2: ModelStringInput? = nil, q3: ModelStringInput? = nil, q4: ModelStringInput? = nil, q5: ModelStringInput? = nil, q6: ModelStringInput? = nil, q7: ModelStringInput? = nil, userId: ModelIDInput? = nil, chatroomId: ModelIDInput? = nil, state: ModelIntInput? = nil, and: [ModelQuestionnarieFilterInput?]? = nil, or: [ModelQuestionnarieFilterInput?]? = nil, not: ModelQuestionnarieFilterInput? = nil) {
    graphQLMap = ["id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var content: ModelStringInput? {
    get {
      return graphQLMap["content"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var q1: ModelStringInput? {
    get {
      return graphQLMap["Q1"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q1")
    }
  }

  public var q2: ModelStringInput? {
    get {
      return graphQLMap["Q2"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q2")
    }
  }

  public var q3: ModelStringInput? {
    get {
      return graphQLMap["Q3"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q3")
    }
  }

  public var q4: ModelStringInput? {
    get {
      return graphQLMap["Q4"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q4")
    }
  }

  public var q5: ModelStringInput? {
    get {
      return graphQLMap["Q5"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q5")
    }
  }

  public var q6: ModelStringInput? {
    get {
      return graphQLMap["Q6"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q6")
    }
  }

  public var q7: ModelStringInput? {
    get {
      return graphQLMap["Q7"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q7")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: ModelIDInput? {
    get {
      return graphQLMap["chatroomID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var state: ModelIntInput? {
    get {
      return graphQLMap["state"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelQuestionnarieFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelQuestionnarieFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelQuestionnarieFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelQuestionnarieFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelQuestionnarieFilterInput? {
    get {
      return graphQLMap["not"] as! ModelQuestionnarieFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelChatRoomFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, newMessages: ModelIntInput? = nil, name: ModelStringInput? = nil, state: ModelStringInput? = nil, and: [ModelChatRoomFilterInput?]? = nil, or: [ModelChatRoomFilterInput?]? = nil, not: ModelChatRoomFilterInput? = nil, chatRoomLastMessageId: ModelIDInput? = nil, chatRoomScheduleId: ModelIDInput? = nil) {
    graphQLMap = ["id": id, "newMessages": newMessages, "name": name, "state": state, "and": and, "or": or, "not": not, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var newMessages: ModelIntInput? {
    get {
      return graphQLMap["newMessages"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newMessages")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var state: ModelStringInput? {
    get {
      return graphQLMap["state"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelChatRoomFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelChatRoomFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelChatRoomFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelChatRoomFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelChatRoomFilterInput? {
    get {
      return graphQLMap["not"] as! ModelChatRoomFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }

  public var chatRoomLastMessageId: ModelIDInput? {
    get {
      return graphQLMap["chatRoomLastMessageId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomLastMessageId")
    }
  }

  public var chatRoomScheduleId: ModelIDInput? {
    get {
      return graphQLMap["chatRoomScheduleId"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomScheduleId")
    }
  }
}

public struct ModelMessageFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, image: ModelStringInput? = nil, status: ModelMessageStatusInput? = nil, content: ModelStringInput? = nil, userId: ModelIDInput? = nil, chatroomId: ModelIDInput? = nil, and: [ModelMessageFilterInput?]? = nil, or: [ModelMessageFilterInput?]? = nil, not: ModelMessageFilterInput? = nil) {
    graphQLMap = ["id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var image: ModelStringInput? {
    get {
      return graphQLMap["image"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "image")
    }
  }

  public var status: ModelMessageStatusInput? {
    get {
      return graphQLMap["status"] as! ModelMessageStatusInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var content: ModelStringInput? {
    get {
      return graphQLMap["content"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: ModelIDInput? {
    get {
      return graphQLMap["chatroomID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var and: [ModelMessageFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelMessageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelMessageFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelMessageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelMessageFilterInput? {
    get {
      return graphQLMap["not"] as! ModelMessageFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, name: ModelStringInput? = nil, patientNumber: ModelStringInput? = nil, phoneNumber: ModelStringInput? = nil, email: ModelStringInput? = nil, status: ModelStringInput? = nil, lastOnlineAt: ModelIntInput? = nil, state: ModelIntInput? = nil, sex: ModelStringInput? = nil, born: ModelStringInput? = nil, phoneNok: ModelStringInput? = nil, and: [ModelUserFilterInput?]? = nil, or: [ModelUserFilterInput?]? = nil, not: ModelUserFilterInput? = nil) {
    graphQLMap = ["id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelStringInput? {
    get {
      return graphQLMap["name"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var patientNumber: ModelStringInput? {
    get {
      return graphQLMap["patientNumber"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "patientNumber")
    }
  }

  public var phoneNumber: ModelStringInput? {
    get {
      return graphQLMap["phoneNumber"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNumber")
    }
  }

  public var email: ModelStringInput? {
    get {
      return graphQLMap["email"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var status: ModelStringInput? {
    get {
      return graphQLMap["status"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var lastOnlineAt: ModelIntInput? {
    get {
      return graphQLMap["lastOnlineAt"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastOnlineAt")
    }
  }

  public var state: ModelIntInput? {
    get {
      return graphQLMap["state"] as! ModelIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var sex: ModelStringInput? {
    get {
      return graphQLMap["sex"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sex")
    }
  }

  public var born: ModelStringInput? {
    get {
      return graphQLMap["born"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "born")
    }
  }

  public var phoneNok: ModelStringInput? {
    get {
      return graphQLMap["phoneNOK"] as! ModelStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNOK")
    }
  }

  public var and: [ModelUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelUserFilterInput? {
    get {
      return graphQLMap["not"] as! ModelUserFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelScheduleUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, scheduleId: ModelIDInput? = nil, userId: ModelIDInput? = nil, and: [ModelScheduleUserFilterInput?]? = nil, or: [ModelScheduleUserFilterInput?]? = nil, not: ModelScheduleUserFilterInput? = nil) {
    graphQLMap = ["id": id, "scheduleID": scheduleId, "userID": userId, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var scheduleId: ModelIDInput? {
    get {
      return graphQLMap["scheduleID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var and: [ModelScheduleUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelScheduleUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelScheduleUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelScheduleUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelScheduleUserFilterInput? {
    get {
      return graphQLMap["not"] as! ModelScheduleUserFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelChatRoomUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelIDInput? = nil, chatRoomId: ModelIDInput? = nil, userId: ModelIDInput? = nil, and: [ModelChatRoomUserFilterInput?]? = nil, or: [ModelChatRoomUserFilterInput?]? = nil, not: ModelChatRoomUserFilterInput? = nil) {
    graphQLMap = ["id": id, "chatRoomID": chatRoomId, "userID": userId, "and": and, "or": or, "not": not]
  }

  public var id: ModelIDInput? {
    get {
      return graphQLMap["id"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var chatRoomId: ModelIDInput? {
    get {
      return graphQLMap["chatRoomID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomID")
    }
  }

  public var userId: ModelIDInput? {
    get {
      return graphQLMap["userID"] as! ModelIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var and: [ModelChatRoomUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelChatRoomUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelChatRoomUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelChatRoomUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }

  public var not: ModelChatRoomUserFilterInput? {
    get {
      return graphQLMap["not"] as! ModelChatRoomUserFilterInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "not")
    }
  }
}

public struct ModelSubscriptionImpossibleFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, userId: ModelSubscriptionStringInput? = nil, ttime: ModelSubscriptionStringInput? = nil, and: [ModelSubscriptionImpossibleFilterInput?]? = nil, or: [ModelSubscriptionImpossibleFilterInput?]? = nil) {
    graphQLMap = ["id": id, "userID": userId, "ttime": ttime, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["userID"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var ttime: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["ttime"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var and: [ModelSubscriptionImpossibleFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionImpossibleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionImpossibleFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionImpossibleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public struct ModelSubscriptionIDInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: GraphQLID? = nil, eq: GraphQLID? = nil, le: GraphQLID? = nil, lt: GraphQLID? = nil, ge: GraphQLID? = nil, gt: GraphQLID? = nil, contains: GraphQLID? = nil, notContains: GraphQLID? = nil, between: [GraphQLID?]? = nil, beginsWith: GraphQLID? = nil, `in`: [GraphQLID?]? = nil, notIn: [GraphQLID?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "in": `in`, "notIn": notIn]
  }

  public var ne: GraphQLID? {
    get {
      return graphQLMap["ne"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: GraphQLID? {
    get {
      return graphQLMap["eq"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: GraphQLID? {
    get {
      return graphQLMap["le"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: GraphQLID? {
    get {
      return graphQLMap["lt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: GraphQLID? {
    get {
      return graphQLMap["ge"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: GraphQLID? {
    get {
      return graphQLMap["gt"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: GraphQLID? {
    get {
      return graphQLMap["contains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: GraphQLID? {
    get {
      return graphQLMap["notContains"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [GraphQLID?]? {
    get {
      return graphQLMap["between"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: GraphQLID? {
    get {
      return graphQLMap["beginsWith"] as! GraphQLID?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var `in`: [GraphQLID?]? {
    get {
      return graphQLMap["in"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "in")
    }
  }

  public var notIn: [GraphQLID?]? {
    get {
      return graphQLMap["notIn"] as! [GraphQLID?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notIn")
    }
  }
}

public struct ModelSubscriptionStringInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: String? = nil, eq: String? = nil, le: String? = nil, lt: String? = nil, ge: String? = nil, gt: String? = nil, contains: String? = nil, notContains: String? = nil, between: [String?]? = nil, beginsWith: String? = nil, `in`: [String?]? = nil, notIn: [String?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "contains": contains, "notContains": notContains, "between": between, "beginsWith": beginsWith, "in": `in`, "notIn": notIn]
  }

  public var ne: String? {
    get {
      return graphQLMap["ne"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: String? {
    get {
      return graphQLMap["eq"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: String? {
    get {
      return graphQLMap["le"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: String? {
    get {
      return graphQLMap["lt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: String? {
    get {
      return graphQLMap["ge"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: String? {
    get {
      return graphQLMap["gt"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var contains: String? {
    get {
      return graphQLMap["contains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "contains")
    }
  }

  public var notContains: String? {
    get {
      return graphQLMap["notContains"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notContains")
    }
  }

  public var between: [String?]? {
    get {
      return graphQLMap["between"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var beginsWith: String? {
    get {
      return graphQLMap["beginsWith"] as! String?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "beginsWith")
    }
  }

  public var `in`: [String?]? {
    get {
      return graphQLMap["in"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "in")
    }
  }

  public var notIn: [String?]? {
    get {
      return graphQLMap["notIn"] as! [String?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notIn")
    }
  }
}

public struct ModelSubscriptionMyScheduleFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, userId: ModelSubscriptionIDInput? = nil, scheduleId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionMyScheduleFilterInput?]? = nil, or: [ModelSubscriptionMyScheduleFilterInput?]? = nil) {
    graphQLMap = ["id": id, "userID": userId, "scheduleID": scheduleId, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var userId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["userID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var scheduleId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["scheduleID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var and: [ModelSubscriptionMyScheduleFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionMyScheduleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionMyScheduleFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionMyScheduleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public struct ModelSubscriptionScheduleFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, reservation: ModelSubscriptionStringInput? = nil, ttime: ModelSubscriptionStringInput? = nil, time: ModelSubscriptionIntInput? = nil, book: ModelSubscriptionStringInput? = nil, state: ModelSubscriptionIntInput? = nil, and: [ModelSubscriptionScheduleFilterInput?]? = nil, or: [ModelSubscriptionScheduleFilterInput?]? = nil) {
    graphQLMap = ["id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var reservation: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["Reservation"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Reservation")
    }
  }

  public var ttime: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["ttime"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ttime")
    }
  }

  public var time: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["time"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "time")
    }
  }

  public var book: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["BOOK"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "BOOK")
    }
  }

  public var state: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["state"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelSubscriptionScheduleFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionScheduleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionScheduleFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionScheduleFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public struct ModelSubscriptionIntInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ne: Int? = nil, eq: Int? = nil, le: Int? = nil, lt: Int? = nil, ge: Int? = nil, gt: Int? = nil, between: [Int?]? = nil, `in`: [Int?]? = nil, notIn: [Int?]? = nil) {
    graphQLMap = ["ne": ne, "eq": eq, "le": le, "lt": lt, "ge": ge, "gt": gt, "between": between, "in": `in`, "notIn": notIn]
  }

  public var ne: Int? {
    get {
      return graphQLMap["ne"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ne")
    }
  }

  public var eq: Int? {
    get {
      return graphQLMap["eq"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "eq")
    }
  }

  public var le: Int? {
    get {
      return graphQLMap["le"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "le")
    }
  }

  public var lt: Int? {
    get {
      return graphQLMap["lt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lt")
    }
  }

  public var ge: Int? {
    get {
      return graphQLMap["ge"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ge")
    }
  }

  public var gt: Int? {
    get {
      return graphQLMap["gt"] as! Int?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gt")
    }
  }

  public var between: [Int?]? {
    get {
      return graphQLMap["between"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "between")
    }
  }

  public var `in`: [Int?]? {
    get {
      return graphQLMap["in"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "in")
    }
  }

  public var notIn: [Int?]? {
    get {
      return graphQLMap["notIn"] as! [Int?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "notIn")
    }
  }
}

public struct ModelSubscriptionQuestionnarieFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, content: ModelSubscriptionStringInput? = nil, q1: ModelSubscriptionStringInput? = nil, q2: ModelSubscriptionStringInput? = nil, q3: ModelSubscriptionStringInput? = nil, q4: ModelSubscriptionStringInput? = nil, q5: ModelSubscriptionStringInput? = nil, q6: ModelSubscriptionStringInput? = nil, q7: ModelSubscriptionStringInput? = nil, userId: ModelSubscriptionIDInput? = nil, chatroomId: ModelSubscriptionIDInput? = nil, state: ModelSubscriptionIntInput? = nil, and: [ModelSubscriptionQuestionnarieFilterInput?]? = nil, or: [ModelSubscriptionQuestionnarieFilterInput?]? = nil) {
    graphQLMap = ["id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var content: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["content"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var q1: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["Q1"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q1")
    }
  }

  public var q2: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["Q2"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q2")
    }
  }

  public var q3: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["Q3"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q3")
    }
  }

  public var q4: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["Q4"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q4")
    }
  }

  public var q5: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["Q5"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q5")
    }
  }

  public var q6: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["Q6"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q6")
    }
  }

  public var q7: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["Q7"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "Q7")
    }
  }

  public var userId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["userID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["chatroomID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var state: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["state"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelSubscriptionQuestionnarieFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionQuestionnarieFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionQuestionnarieFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionQuestionnarieFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public struct ModelSubscriptionChatRoomFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, newMessages: ModelSubscriptionIntInput? = nil, name: ModelSubscriptionStringInput? = nil, state: ModelSubscriptionStringInput? = nil, and: [ModelSubscriptionChatRoomFilterInput?]? = nil, or: [ModelSubscriptionChatRoomFilterInput?]? = nil) {
    graphQLMap = ["id": id, "newMessages": newMessages, "name": name, "state": state, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var newMessages: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["newMessages"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "newMessages")
    }
  }

  public var name: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["name"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var state: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["state"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var and: [ModelSubscriptionChatRoomFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionChatRoomFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionChatRoomFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionChatRoomFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public struct ModelSubscriptionMessageFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, image: ModelSubscriptionStringInput? = nil, status: ModelSubscriptionStringInput? = nil, content: ModelSubscriptionStringInput? = nil, userId: ModelSubscriptionIDInput? = nil, chatroomId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionMessageFilterInput?]? = nil, or: [ModelSubscriptionMessageFilterInput?]? = nil) {
    graphQLMap = ["id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var image: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["image"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "image")
    }
  }

  public var status: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["status"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var content: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["content"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  public var userId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["userID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var chatroomId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["chatroomID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatroomID")
    }
  }

  public var and: [ModelSubscriptionMessageFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionMessageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionMessageFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionMessageFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public struct ModelSubscriptionUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, name: ModelSubscriptionStringInput? = nil, patientNumber: ModelSubscriptionStringInput? = nil, phoneNumber: ModelSubscriptionStringInput? = nil, email: ModelSubscriptionStringInput? = nil, status: ModelSubscriptionStringInput? = nil, lastOnlineAt: ModelSubscriptionIntInput? = nil, state: ModelSubscriptionIntInput? = nil, sex: ModelSubscriptionStringInput? = nil, born: ModelSubscriptionStringInput? = nil, phoneNok: ModelSubscriptionStringInput? = nil, and: [ModelSubscriptionUserFilterInput?]? = nil, or: [ModelSubscriptionUserFilterInput?]? = nil) {
    graphQLMap = ["id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var name: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["name"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var patientNumber: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["patientNumber"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "patientNumber")
    }
  }

  public var phoneNumber: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["phoneNumber"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNumber")
    }
  }

  public var email: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["email"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var status: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["status"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "status")
    }
  }

  public var lastOnlineAt: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["lastOnlineAt"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastOnlineAt")
    }
  }

  public var state: ModelSubscriptionIntInput? {
    get {
      return graphQLMap["state"] as! ModelSubscriptionIntInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "state")
    }
  }

  public var sex: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["sex"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sex")
    }
  }

  public var born: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["born"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "born")
    }
  }

  public var phoneNok: ModelSubscriptionStringInput? {
    get {
      return graphQLMap["phoneNOK"] as! ModelSubscriptionStringInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneNOK")
    }
  }

  public var and: [ModelSubscriptionUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public struct ModelSubscriptionScheduleUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, scheduleId: ModelSubscriptionIDInput? = nil, userId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionScheduleUserFilterInput?]? = nil, or: [ModelSubscriptionScheduleUserFilterInput?]? = nil) {
    graphQLMap = ["id": id, "scheduleID": scheduleId, "userID": userId, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var scheduleId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["scheduleID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "scheduleID")
    }
  }

  public var userId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["userID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var and: [ModelSubscriptionScheduleUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionScheduleUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionScheduleUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionScheduleUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public struct ModelSubscriptionChatRoomUserFilterInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(id: ModelSubscriptionIDInput? = nil, chatRoomId: ModelSubscriptionIDInput? = nil, userId: ModelSubscriptionIDInput? = nil, and: [ModelSubscriptionChatRoomUserFilterInput?]? = nil, or: [ModelSubscriptionChatRoomUserFilterInput?]? = nil) {
    graphQLMap = ["id": id, "chatRoomID": chatRoomId, "userID": userId, "and": and, "or": or]
  }

  public var id: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["id"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  public var chatRoomId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["chatRoomID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "chatRoomID")
    }
  }

  public var userId: ModelSubscriptionIDInput? {
    get {
      return graphQLMap["userID"] as! ModelSubscriptionIDInput?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userID")
    }
  }

  public var and: [ModelSubscriptionChatRoomUserFilterInput?]? {
    get {
      return graphQLMap["and"] as! [ModelSubscriptionChatRoomUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "and")
    }
  }

  public var or: [ModelSubscriptionChatRoomUserFilterInput?]? {
    get {
      return graphQLMap["or"] as! [ModelSubscriptionChatRoomUserFilterInput?]?
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "or")
    }
  }
}

public final class CreateImpossibleMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateImpossible($input: CreateImpossibleInput!, $condition: ModelImpossibleConditionInput) {\n  createImpossible(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    ttime\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateImpossibleInput
  public var condition: ModelImpossibleConditionInput?

  public init(input: CreateImpossibleInput, condition: ModelImpossibleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createImpossible", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createImpossible: CreateImpossible? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createImpossible": createImpossible.flatMap { $0.snapshot }])
    }

    public var createImpossible: CreateImpossible? {
      get {
        return (snapshot["createImpossible"] as? Snapshot).flatMap { CreateImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createImpossible")
      }
    }

    public struct CreateImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["Impossible"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: String? {
        get {
          return snapshot["userID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateImpossibleMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateImpossible($input: UpdateImpossibleInput!, $condition: ModelImpossibleConditionInput) {\n  updateImpossible(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    ttime\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateImpossibleInput
  public var condition: ModelImpossibleConditionInput?

  public init(input: UpdateImpossibleInput, condition: ModelImpossibleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateImpossible", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateImpossible: UpdateImpossible? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateImpossible": updateImpossible.flatMap { $0.snapshot }])
    }

    public var updateImpossible: UpdateImpossible? {
      get {
        return (snapshot["updateImpossible"] as? Snapshot).flatMap { UpdateImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateImpossible")
      }
    }

    public struct UpdateImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["Impossible"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: String? {
        get {
          return snapshot["userID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteImpossibleMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteImpossible($input: DeleteImpossibleInput!, $condition: ModelImpossibleConditionInput) {\n  deleteImpossible(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    ttime\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteImpossibleInput
  public var condition: ModelImpossibleConditionInput?

  public init(input: DeleteImpossibleInput, condition: ModelImpossibleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteImpossible", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteImpossible: DeleteImpossible? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteImpossible": deleteImpossible.flatMap { $0.snapshot }])
    }

    public var deleteImpossible: DeleteImpossible? {
      get {
        return (snapshot["deleteImpossible"] as? Snapshot).flatMap { DeleteImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteImpossible")
      }
    }

    public struct DeleteImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["Impossible"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: String? {
        get {
          return snapshot["userID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class CreateMyScheduleMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateMySchedule($input: CreateMyScheduleInput!, $condition: ModelMyScheduleConditionInput) {\n  createMySchedule(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    scheduleID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateMyScheduleInput
  public var condition: ModelMyScheduleConditionInput?

  public init(input: CreateMyScheduleInput, condition: ModelMyScheduleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createMySchedule", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createMySchedule: CreateMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createMySchedule": createMySchedule.flatMap { $0.snapshot }])
    }

    public var createMySchedule: CreateMySchedule? {
      get {
        return (snapshot["createMySchedule"] as? Snapshot).flatMap { CreateMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createMySchedule")
      }
    }

    public struct CreateMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["MySchedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var scheduleId: GraphQLID? {
        get {
          return snapshot["scheduleID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateMyScheduleMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateMySchedule($input: UpdateMyScheduleInput!, $condition: ModelMyScheduleConditionInput) {\n  updateMySchedule(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    scheduleID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateMyScheduleInput
  public var condition: ModelMyScheduleConditionInput?

  public init(input: UpdateMyScheduleInput, condition: ModelMyScheduleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateMySchedule", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateMySchedule: UpdateMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateMySchedule": updateMySchedule.flatMap { $0.snapshot }])
    }

    public var updateMySchedule: UpdateMySchedule? {
      get {
        return (snapshot["updateMySchedule"] as? Snapshot).flatMap { UpdateMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateMySchedule")
      }
    }

    public struct UpdateMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["MySchedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var scheduleId: GraphQLID? {
        get {
          return snapshot["scheduleID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteMyScheduleMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteMySchedule($input: DeleteMyScheduleInput!, $condition: ModelMyScheduleConditionInput) {\n  deleteMySchedule(input: $input, condition: $condition) {\n    __typename\n    id\n    userID\n    scheduleID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteMyScheduleInput
  public var condition: ModelMyScheduleConditionInput?

  public init(input: DeleteMyScheduleInput, condition: ModelMyScheduleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteMySchedule", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteMySchedule: DeleteMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteMySchedule": deleteMySchedule.flatMap { $0.snapshot }])
    }

    public var deleteMySchedule: DeleteMySchedule? {
      get {
        return (snapshot["deleteMySchedule"] as? Snapshot).flatMap { DeleteMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteMySchedule")
      }
    }

    public struct DeleteMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["MySchedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var scheduleId: GraphQLID? {
        get {
          return snapshot["scheduleID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class CreateScheduleMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateSchedule($input: CreateScheduleInput!, $condition: ModelScheduleConditionInput) {\n  createSchedule(input: $input, condition: $condition) {\n    __typename\n    id\n    Reservation\n    ttime\n    time\n    BOOK\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateScheduleInput
  public var condition: ModelScheduleConditionInput?

  public init(input: CreateScheduleInput, condition: ModelScheduleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createSchedule", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createSchedule: CreateSchedule? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createSchedule": createSchedule.flatMap { $0.snapshot }])
    }

    public var createSchedule: CreateSchedule? {
      get {
        return (snapshot["createSchedule"] as? Snapshot).flatMap { CreateSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createSchedule")
      }
    }

    public struct CreateSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["Schedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("Reservation", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("BOOK", type: .scalar(String.self)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reservation: String? {
        get {
          return snapshot["Reservation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Reservation")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      public var book: String? {
        get {
          return snapshot["BOOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "BOOK")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class UpdateScheduleMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateSchedule($input: UpdateScheduleInput!, $condition: ModelScheduleConditionInput) {\n  updateSchedule(input: $input, condition: $condition) {\n    __typename\n    id\n    Reservation\n    ttime\n    time\n    BOOK\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateScheduleInput
  public var condition: ModelScheduleConditionInput?

  public init(input: UpdateScheduleInput, condition: ModelScheduleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateSchedule", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateSchedule: UpdateSchedule? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateSchedule": updateSchedule.flatMap { $0.snapshot }])
    }

    public var updateSchedule: UpdateSchedule? {
      get {
        return (snapshot["updateSchedule"] as? Snapshot).flatMap { UpdateSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateSchedule")
      }
    }

    public struct UpdateSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["Schedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("Reservation", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("BOOK", type: .scalar(String.self)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reservation: String? {
        get {
          return snapshot["Reservation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Reservation")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      public var book: String? {
        get {
          return snapshot["BOOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "BOOK")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class DeleteScheduleMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteSchedule($input: DeleteScheduleInput!, $condition: ModelScheduleConditionInput) {\n  deleteSchedule(input: $input, condition: $condition) {\n    __typename\n    id\n    Reservation\n    ttime\n    time\n    BOOK\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteScheduleInput
  public var condition: ModelScheduleConditionInput?

  public init(input: DeleteScheduleInput, condition: ModelScheduleConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteSchedule", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteSchedule: DeleteSchedule? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteSchedule": deleteSchedule.flatMap { $0.snapshot }])
    }

    public var deleteSchedule: DeleteSchedule? {
      get {
        return (snapshot["deleteSchedule"] as? Snapshot).flatMap { DeleteSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteSchedule")
      }
    }

    public struct DeleteSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["Schedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("Reservation", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("BOOK", type: .scalar(String.self)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reservation: String? {
        get {
          return snapshot["Reservation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Reservation")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      public var book: String? {
        get {
          return snapshot["BOOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "BOOK")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class CreateQuestionnarieMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateQuestionnarie($input: CreateQuestionnarieInput!, $condition: ModelQuestionnarieConditionInput) {\n  createQuestionnarie(input: $input, condition: $condition) {\n    __typename\n    id\n    content\n    Q1\n    Q2\n    Q3\n    Q4\n    Q5\n    Q6\n    Q7\n    userID\n    chatroomID\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateQuestionnarieInput
  public var condition: ModelQuestionnarieConditionInput?

  public init(input: CreateQuestionnarieInput, condition: ModelQuestionnarieConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createQuestionnarie", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateQuestionnarie.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createQuestionnarie: CreateQuestionnarie? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createQuestionnarie": createQuestionnarie.flatMap { $0.snapshot }])
    }

    public var createQuestionnarie: CreateQuestionnarie? {
      get {
        return (snapshot["createQuestionnarie"] as? Snapshot).flatMap { CreateQuestionnarie(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createQuestionnarie")
      }
    }

    public struct CreateQuestionnarie: GraphQLSelectionSet {
      public static let possibleTypes = ["Questionnarie"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("Q1", type: .scalar(String.self)),
        GraphQLField("Q2", type: .scalar(String.self)),
        GraphQLField("Q3", type: .scalar(String.self)),
        GraphQLField("Q4", type: .scalar(String.self)),
        GraphQLField("Q5", type: .scalar(String.self)),
        GraphQLField("Q6", type: .scalar(String.self)),
        GraphQLField("Q7", type: .list(.scalar(String.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var q1: String? {
        get {
          return snapshot["Q1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q1")
        }
      }

      public var q2: String? {
        get {
          return snapshot["Q2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q2")
        }
      }

      public var q3: String? {
        get {
          return snapshot["Q3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q3")
        }
      }

      public var q4: String? {
        get {
          return snapshot["Q4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q4")
        }
      }

      public var q5: String? {
        get {
          return snapshot["Q5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q5")
        }
      }

      public var q6: String? {
        get {
          return snapshot["Q6"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q6")
        }
      }

      public var q7: [String?]? {
        get {
          return snapshot["Q7"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q7")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateQuestionnarieMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateQuestionnarie($input: UpdateQuestionnarieInput!, $condition: ModelQuestionnarieConditionInput) {\n  updateQuestionnarie(input: $input, condition: $condition) {\n    __typename\n    id\n    content\n    Q1\n    Q2\n    Q3\n    Q4\n    Q5\n    Q6\n    Q7\n    userID\n    chatroomID\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateQuestionnarieInput
  public var condition: ModelQuestionnarieConditionInput?

  public init(input: UpdateQuestionnarieInput, condition: ModelQuestionnarieConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateQuestionnarie", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateQuestionnarie.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateQuestionnarie: UpdateQuestionnarie? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateQuestionnarie": updateQuestionnarie.flatMap { $0.snapshot }])
    }

    public var updateQuestionnarie: UpdateQuestionnarie? {
      get {
        return (snapshot["updateQuestionnarie"] as? Snapshot).flatMap { UpdateQuestionnarie(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateQuestionnarie")
      }
    }

    public struct UpdateQuestionnarie: GraphQLSelectionSet {
      public static let possibleTypes = ["Questionnarie"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("Q1", type: .scalar(String.self)),
        GraphQLField("Q2", type: .scalar(String.self)),
        GraphQLField("Q3", type: .scalar(String.self)),
        GraphQLField("Q4", type: .scalar(String.self)),
        GraphQLField("Q5", type: .scalar(String.self)),
        GraphQLField("Q6", type: .scalar(String.self)),
        GraphQLField("Q7", type: .list(.scalar(String.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var q1: String? {
        get {
          return snapshot["Q1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q1")
        }
      }

      public var q2: String? {
        get {
          return snapshot["Q2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q2")
        }
      }

      public var q3: String? {
        get {
          return snapshot["Q3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q3")
        }
      }

      public var q4: String? {
        get {
          return snapshot["Q4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q4")
        }
      }

      public var q5: String? {
        get {
          return snapshot["Q5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q5")
        }
      }

      public var q6: String? {
        get {
          return snapshot["Q6"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q6")
        }
      }

      public var q7: [String?]? {
        get {
          return snapshot["Q7"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q7")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteQuestionnarieMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteQuestionnarie($input: DeleteQuestionnarieInput!, $condition: ModelQuestionnarieConditionInput) {\n  deleteQuestionnarie(input: $input, condition: $condition) {\n    __typename\n    id\n    content\n    Q1\n    Q2\n    Q3\n    Q4\n    Q5\n    Q6\n    Q7\n    userID\n    chatroomID\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteQuestionnarieInput
  public var condition: ModelQuestionnarieConditionInput?

  public init(input: DeleteQuestionnarieInput, condition: ModelQuestionnarieConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteQuestionnarie", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteQuestionnarie.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteQuestionnarie: DeleteQuestionnarie? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteQuestionnarie": deleteQuestionnarie.flatMap { $0.snapshot }])
    }

    public var deleteQuestionnarie: DeleteQuestionnarie? {
      get {
        return (snapshot["deleteQuestionnarie"] as? Snapshot).flatMap { DeleteQuestionnarie(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteQuestionnarie")
      }
    }

    public struct DeleteQuestionnarie: GraphQLSelectionSet {
      public static let possibleTypes = ["Questionnarie"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("Q1", type: .scalar(String.self)),
        GraphQLField("Q2", type: .scalar(String.self)),
        GraphQLField("Q3", type: .scalar(String.self)),
        GraphQLField("Q4", type: .scalar(String.self)),
        GraphQLField("Q5", type: .scalar(String.self)),
        GraphQLField("Q6", type: .scalar(String.self)),
        GraphQLField("Q7", type: .list(.scalar(String.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var q1: String? {
        get {
          return snapshot["Q1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q1")
        }
      }

      public var q2: String? {
        get {
          return snapshot["Q2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q2")
        }
      }

      public var q3: String? {
        get {
          return snapshot["Q3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q3")
        }
      }

      public var q4: String? {
        get {
          return snapshot["Q4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q4")
        }
      }

      public var q5: String? {
        get {
          return snapshot["Q5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q5")
        }
      }

      public var q6: String? {
        get {
          return snapshot["Q6"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q6")
        }
      }

      public var q7: [String?]? {
        get {
          return snapshot["Q7"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q7")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class CreateChatRoomMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateChatRoom($input: CreateChatRoomInput!, $condition: ModelChatRoomConditionInput) {\n  createChatRoom(input: $input, condition: $condition) {\n    __typename\n    id\n    newMessages\n    name\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    LastMessage {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    chatRoomLastMessageId\n    chatRoomScheduleId\n  }\n}"

  public var input: CreateChatRoomInput
  public var condition: ModelChatRoomConditionInput?

  public init(input: CreateChatRoomInput, condition: ModelChatRoomConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createChatRoom", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createChatRoom: CreateChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createChatRoom": createChatRoom.flatMap { $0.snapshot }])
    }

    public var createChatRoom: CreateChatRoom? {
      get {
        return (snapshot["createChatRoom"] as? Snapshot).flatMap { CreateChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createChatRoom")
      }
    }

    public struct CreateChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoom"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newMessages", type: .scalar(Int.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("LastMessage", type: .object(LastMessage.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("Schedule", type: .object(Schedule.selections)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
        GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newMessages: Int? {
        get {
          return snapshot["newMessages"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "newMessages")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var lastMessage: LastMessage? {
        get {
          return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var schedule: Schedule? {
        get {
          return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
        }
      }

      public var state: String? {
        get {
          return snapshot["state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var chatRoomLastMessageId: GraphQLID? {
        get {
          return snapshot["chatRoomLastMessageId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
        }
      }

      public var chatRoomScheduleId: GraphQLID? {
        get {
          return snapshot["chatRoomScheduleId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct LastMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class UpdateChatRoomMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateChatRoom($input: UpdateChatRoomInput!, $condition: ModelChatRoomConditionInput) {\n  updateChatRoom(input: $input, condition: $condition) {\n    __typename\n    id\n    newMessages\n    name\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    LastMessage {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    chatRoomLastMessageId\n    chatRoomScheduleId\n  }\n}"

  public var input: UpdateChatRoomInput
  public var condition: ModelChatRoomConditionInput?

  public init(input: UpdateChatRoomInput, condition: ModelChatRoomConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateChatRoom", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateChatRoom: UpdateChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateChatRoom": updateChatRoom.flatMap { $0.snapshot }])
    }

    public var updateChatRoom: UpdateChatRoom? {
      get {
        return (snapshot["updateChatRoom"] as? Snapshot).flatMap { UpdateChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateChatRoom")
      }
    }

    public struct UpdateChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoom"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newMessages", type: .scalar(Int.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("LastMessage", type: .object(LastMessage.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("Schedule", type: .object(Schedule.selections)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
        GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newMessages: Int? {
        get {
          return snapshot["newMessages"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "newMessages")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var lastMessage: LastMessage? {
        get {
          return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var schedule: Schedule? {
        get {
          return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
        }
      }

      public var state: String? {
        get {
          return snapshot["state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var chatRoomLastMessageId: GraphQLID? {
        get {
          return snapshot["chatRoomLastMessageId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
        }
      }

      public var chatRoomScheduleId: GraphQLID? {
        get {
          return snapshot["chatRoomScheduleId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct LastMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class DeleteChatRoomMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteChatRoom($input: DeleteChatRoomInput!, $condition: ModelChatRoomConditionInput) {\n  deleteChatRoom(input: $input, condition: $condition) {\n    __typename\n    id\n    newMessages\n    name\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    LastMessage {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    chatRoomLastMessageId\n    chatRoomScheduleId\n  }\n}"

  public var input: DeleteChatRoomInput
  public var condition: ModelChatRoomConditionInput?

  public init(input: DeleteChatRoomInput, condition: ModelChatRoomConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteChatRoom", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteChatRoom: DeleteChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteChatRoom": deleteChatRoom.flatMap { $0.snapshot }])
    }

    public var deleteChatRoom: DeleteChatRoom? {
      get {
        return (snapshot["deleteChatRoom"] as? Snapshot).flatMap { DeleteChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteChatRoom")
      }
    }

    public struct DeleteChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoom"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newMessages", type: .scalar(Int.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("LastMessage", type: .object(LastMessage.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("Schedule", type: .object(Schedule.selections)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
        GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newMessages: Int? {
        get {
          return snapshot["newMessages"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "newMessages")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var lastMessage: LastMessage? {
        get {
          return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var schedule: Schedule? {
        get {
          return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
        }
      }

      public var state: String? {
        get {
          return snapshot["state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var chatRoomLastMessageId: GraphQLID? {
        get {
          return snapshot["chatRoomLastMessageId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
        }
      }

      public var chatRoomScheduleId: GraphQLID? {
        get {
          return snapshot["chatRoomScheduleId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct LastMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class CreateMessageMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateMessage($input: CreateMessageInput!, $condition: ModelMessageConditionInput) {\n  createMessage(input: $input, condition: $condition) {\n    __typename\n    id\n    image\n    status\n    content\n    userID\n    chatroomID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateMessageInput
  public var condition: ModelMessageConditionInput?

  public init(input: CreateMessageInput, condition: ModelMessageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createMessage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createMessage: CreateMessage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createMessage": createMessage.flatMap { $0.snapshot }])
    }

    public var createMessage: CreateMessage? {
      get {
        return (snapshot["createMessage"] as? Snapshot).flatMap { CreateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createMessage")
      }
    }

    public struct CreateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("image", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(MessageStatus.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var image: String? {
        get {
          return snapshot["image"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image")
        }
      }

      public var status: MessageStatus? {
        get {
          return snapshot["status"] as? MessageStatus
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class UpdateMessageMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateMessage($input: UpdateMessageInput!, $condition: ModelMessageConditionInput) {\n  updateMessage(input: $input, condition: $condition) {\n    __typename\n    id\n    image\n    status\n    content\n    userID\n    chatroomID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateMessageInput
  public var condition: ModelMessageConditionInput?

  public init(input: UpdateMessageInput, condition: ModelMessageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateMessage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateMessage: UpdateMessage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateMessage": updateMessage.flatMap { $0.snapshot }])
    }

    public var updateMessage: UpdateMessage? {
      get {
        return (snapshot["updateMessage"] as? Snapshot).flatMap { UpdateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateMessage")
      }
    }

    public struct UpdateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("image", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(MessageStatus.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var image: String? {
        get {
          return snapshot["image"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image")
        }
      }

      public var status: MessageStatus? {
        get {
          return snapshot["status"] as? MessageStatus
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class DeleteMessageMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteMessage($input: DeleteMessageInput!, $condition: ModelMessageConditionInput) {\n  deleteMessage(input: $input, condition: $condition) {\n    __typename\n    id\n    image\n    status\n    content\n    userID\n    chatroomID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteMessageInput
  public var condition: ModelMessageConditionInput?

  public init(input: DeleteMessageInput, condition: ModelMessageConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteMessage", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteMessage: DeleteMessage? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteMessage": deleteMessage.flatMap { $0.snapshot }])
    }

    public var deleteMessage: DeleteMessage? {
      get {
        return (snapshot["deleteMessage"] as? Snapshot).flatMap { DeleteMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteMessage")
      }
    }

    public struct DeleteMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("image", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(MessageStatus.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var image: String? {
        get {
          return snapshot["image"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image")
        }
      }

      public var status: MessageStatus? {
        get {
          return snapshot["status"] as? MessageStatus
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class CreateUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateUser($input: CreateUserInput!, $condition: ModelUserConditionInput) {\n  createUser(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    patientNumber\n    phoneNumber\n    email\n    status\n    lastOnlineAt\n    schedules {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    chatrooms {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    sex\n    born\n    phoneNOK\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateUserInput
  public var condition: ModelUserConditionInput?

  public init(input: CreateUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createUser: CreateUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createUser": createUser.flatMap { $0.snapshot }])
    }

    public var createUser: CreateUser? {
      get {
        return (snapshot["createUser"] as? Snapshot).flatMap { CreateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createUser")
      }
    }

    public struct CreateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("patientNumber", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
        GraphQLField("schedules", type: .object(Schedule.selections)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("chatrooms", type: .object(Chatroom.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("sex", type: .scalar(String.self)),
        GraphQLField("born", type: .scalar(String.self)),
        GraphQLField("phoneNOK", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var patientNumber: String? {
        get {
          return snapshot["patientNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "patientNumber")
        }
      }

      public var phoneNumber: String? {
        get {
          return snapshot["phoneNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      public var email: String? {
        get {
          return snapshot["email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var lastOnlineAt: Int? {
        get {
          return snapshot["lastOnlineAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastOnlineAt")
        }
      }

      public var schedules: Schedule? {
        get {
          return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var chatrooms: Chatroom? {
        get {
          return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var sex: String? {
        get {
          return snapshot["sex"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sex")
        }
      }

      public var born: String? {
        get {
          return snapshot["born"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "born")
        }
      }

      public var phoneNok: String? {
        get {
          return snapshot["phoneNOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNOK")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Chatroom: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class UpdateUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateUser($input: UpdateUserInput!, $condition: ModelUserConditionInput) {\n  updateUser(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    patientNumber\n    phoneNumber\n    email\n    status\n    lastOnlineAt\n    schedules {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    chatrooms {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    sex\n    born\n    phoneNOK\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateUserInput
  public var condition: ModelUserConditionInput?

  public init(input: UpdateUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateUser: UpdateUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateUser": updateUser.flatMap { $0.snapshot }])
    }

    public var updateUser: UpdateUser? {
      get {
        return (snapshot["updateUser"] as? Snapshot).flatMap { UpdateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateUser")
      }
    }

    public struct UpdateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("patientNumber", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
        GraphQLField("schedules", type: .object(Schedule.selections)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("chatrooms", type: .object(Chatroom.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("sex", type: .scalar(String.self)),
        GraphQLField("born", type: .scalar(String.self)),
        GraphQLField("phoneNOK", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var patientNumber: String? {
        get {
          return snapshot["patientNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "patientNumber")
        }
      }

      public var phoneNumber: String? {
        get {
          return snapshot["phoneNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      public var email: String? {
        get {
          return snapshot["email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var lastOnlineAt: Int? {
        get {
          return snapshot["lastOnlineAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastOnlineAt")
        }
      }

      public var schedules: Schedule? {
        get {
          return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var chatrooms: Chatroom? {
        get {
          return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var sex: String? {
        get {
          return snapshot["sex"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sex")
        }
      }

      public var born: String? {
        get {
          return snapshot["born"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "born")
        }
      }

      public var phoneNok: String? {
        get {
          return snapshot["phoneNOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNOK")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Chatroom: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class DeleteUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteUser($input: DeleteUserInput!, $condition: ModelUserConditionInput) {\n  deleteUser(input: $input, condition: $condition) {\n    __typename\n    id\n    name\n    patientNumber\n    phoneNumber\n    email\n    status\n    lastOnlineAt\n    schedules {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    chatrooms {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    sex\n    born\n    phoneNOK\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteUserInput
  public var condition: ModelUserConditionInput?

  public init(input: DeleteUserInput, condition: ModelUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteUser: DeleteUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteUser": deleteUser.flatMap { $0.snapshot }])
    }

    public var deleteUser: DeleteUser? {
      get {
        return (snapshot["deleteUser"] as? Snapshot).flatMap { DeleteUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteUser")
      }
    }

    public struct DeleteUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("patientNumber", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
        GraphQLField("schedules", type: .object(Schedule.selections)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("chatrooms", type: .object(Chatroom.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("sex", type: .scalar(String.self)),
        GraphQLField("born", type: .scalar(String.self)),
        GraphQLField("phoneNOK", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var patientNumber: String? {
        get {
          return snapshot["patientNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "patientNumber")
        }
      }

      public var phoneNumber: String? {
        get {
          return snapshot["phoneNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      public var email: String? {
        get {
          return snapshot["email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var lastOnlineAt: Int? {
        get {
          return snapshot["lastOnlineAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastOnlineAt")
        }
      }

      public var schedules: Schedule? {
        get {
          return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var chatrooms: Chatroom? {
        get {
          return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var sex: String? {
        get {
          return snapshot["sex"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sex")
        }
      }

      public var born: String? {
        get {
          return snapshot["born"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "born")
        }
      }

      public var phoneNok: String? {
        get {
          return snapshot["phoneNOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNOK")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Chatroom: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class CreateScheduleUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateScheduleUser($input: CreateScheduleUserInput!, $condition: ModelScheduleUserConditionInput) {\n  createScheduleUser(input: $input, condition: $condition) {\n    __typename\n    id\n    scheduleID\n    userID\n    schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateScheduleUserInput
  public var condition: ModelScheduleUserConditionInput?

  public init(input: CreateScheduleUserInput, condition: ModelScheduleUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createScheduleUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createScheduleUser: CreateScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createScheduleUser": createScheduleUser.flatMap { $0.snapshot }])
    }

    public var createScheduleUser: CreateScheduleUser? {
      get {
        return (snapshot["createScheduleUser"] as? Snapshot).flatMap { CreateScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createScheduleUser")
      }
    }

    public struct CreateScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ScheduleUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var scheduleId: GraphQLID {
        get {
          return snapshot["scheduleID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var schedule: Schedule {
        get {
          return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "schedule")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class UpdateScheduleUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateScheduleUser($input: UpdateScheduleUserInput!, $condition: ModelScheduleUserConditionInput) {\n  updateScheduleUser(input: $input, condition: $condition) {\n    __typename\n    id\n    scheduleID\n    userID\n    schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateScheduleUserInput
  public var condition: ModelScheduleUserConditionInput?

  public init(input: UpdateScheduleUserInput, condition: ModelScheduleUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateScheduleUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateScheduleUser: UpdateScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateScheduleUser": updateScheduleUser.flatMap { $0.snapshot }])
    }

    public var updateScheduleUser: UpdateScheduleUser? {
      get {
        return (snapshot["updateScheduleUser"] as? Snapshot).flatMap { UpdateScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateScheduleUser")
      }
    }

    public struct UpdateScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ScheduleUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var scheduleId: GraphQLID {
        get {
          return snapshot["scheduleID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var schedule: Schedule {
        get {
          return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "schedule")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class DeleteScheduleUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteScheduleUser($input: DeleteScheduleUserInput!, $condition: ModelScheduleUserConditionInput) {\n  deleteScheduleUser(input: $input, condition: $condition) {\n    __typename\n    id\n    scheduleID\n    userID\n    schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteScheduleUserInput
  public var condition: ModelScheduleUserConditionInput?

  public init(input: DeleteScheduleUserInput, condition: ModelScheduleUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteScheduleUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteScheduleUser: DeleteScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteScheduleUser": deleteScheduleUser.flatMap { $0.snapshot }])
    }

    public var deleteScheduleUser: DeleteScheduleUser? {
      get {
        return (snapshot["deleteScheduleUser"] as? Snapshot).flatMap { DeleteScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteScheduleUser")
      }
    }

    public struct DeleteScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ScheduleUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var scheduleId: GraphQLID {
        get {
          return snapshot["scheduleID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var schedule: Schedule {
        get {
          return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "schedule")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class CreateChatRoomUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation CreateChatRoomUser($input: CreateChatRoomUserInput!, $condition: ModelChatRoomUserConditionInput) {\n  createChatRoomUser(input: $input, condition: $condition) {\n    __typename\n    id\n    chatRoomID\n    userID\n    chatRoom {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: CreateChatRoomUserInput
  public var condition: ModelChatRoomUserConditionInput?

  public init(input: CreateChatRoomUserInput, condition: ModelChatRoomUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("createChatRoomUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(CreateChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(createChatRoomUser: CreateChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "createChatRoomUser": createChatRoomUser.flatMap { $0.snapshot }])
    }

    public var createChatRoomUser: CreateChatRoomUser? {
      get {
        return (snapshot["createChatRoomUser"] as? Snapshot).flatMap { CreateChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "createChatRoomUser")
      }
    }

    public struct CreateChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var chatRoomId: GraphQLID {
        get {
          return snapshot["chatRoomID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatRoom: ChatRoom {
        get {
          return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct ChatRoom: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class UpdateChatRoomUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation UpdateChatRoomUser($input: UpdateChatRoomUserInput!, $condition: ModelChatRoomUserConditionInput) {\n  updateChatRoomUser(input: $input, condition: $condition) {\n    __typename\n    id\n    chatRoomID\n    userID\n    chatRoom {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: UpdateChatRoomUserInput
  public var condition: ModelChatRoomUserConditionInput?

  public init(input: UpdateChatRoomUserInput, condition: ModelChatRoomUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("updateChatRoomUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(UpdateChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(updateChatRoomUser: UpdateChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "updateChatRoomUser": updateChatRoomUser.flatMap { $0.snapshot }])
    }

    public var updateChatRoomUser: UpdateChatRoomUser? {
      get {
        return (snapshot["updateChatRoomUser"] as? Snapshot).flatMap { UpdateChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "updateChatRoomUser")
      }
    }

    public struct UpdateChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var chatRoomId: GraphQLID {
        get {
          return snapshot["chatRoomID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatRoom: ChatRoom {
        get {
          return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct ChatRoom: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class DeleteChatRoomUserMutation: GraphQLMutation {
  public static let operationString =
    "mutation DeleteChatRoomUser($input: DeleteChatRoomUserInput!, $condition: ModelChatRoomUserConditionInput) {\n  deleteChatRoomUser(input: $input, condition: $condition) {\n    __typename\n    id\n    chatRoomID\n    userID\n    chatRoom {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var input: DeleteChatRoomUserInput
  public var condition: ModelChatRoomUserConditionInput?

  public init(input: DeleteChatRoomUserInput, condition: ModelChatRoomUserConditionInput? = nil) {
    self.input = input
    self.condition = condition
  }

  public var variables: GraphQLMap? {
    return ["input": input, "condition": condition]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Mutation"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("deleteChatRoomUser", arguments: ["input": GraphQLVariable("input"), "condition": GraphQLVariable("condition")], type: .object(DeleteChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(deleteChatRoomUser: DeleteChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Mutation", "deleteChatRoomUser": deleteChatRoomUser.flatMap { $0.snapshot }])
    }

    public var deleteChatRoomUser: DeleteChatRoomUser? {
      get {
        return (snapshot["deleteChatRoomUser"] as? Snapshot).flatMap { DeleteChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "deleteChatRoomUser")
      }
    }

    public struct DeleteChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var chatRoomId: GraphQLID {
        get {
          return snapshot["chatRoomID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatRoom: ChatRoom {
        get {
          return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct ChatRoom: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class GetImpossibleQuery: GraphQLQuery {
  public static let operationString =
    "query GetImpossible($id: ID!) {\n  getImpossible(id: $id) {\n    __typename\n    id\n    userID\n    ttime\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getImpossible", arguments: ["id": GraphQLVariable("id")], type: .object(GetImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getImpossible: GetImpossible? = nil) {
      self.init(snapshot: ["__typename": "Query", "getImpossible": getImpossible.flatMap { $0.snapshot }])
    }

    public var getImpossible: GetImpossible? {
      get {
        return (snapshot["getImpossible"] as? Snapshot).flatMap { GetImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getImpossible")
      }
    }

    public struct GetImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["Impossible"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: String? {
        get {
          return snapshot["userID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListImpossiblesQuery: GraphQLQuery {
  public static let operationString =
    "query ListImpossibles($filter: ModelImpossibleFilterInput, $limit: Int, $nextToken: String) {\n  listImpossibles(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      userID\n      ttime\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelImpossibleFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelImpossibleFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listImpossibles", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listImpossibles: ListImpossible? = nil) {
      self.init(snapshot: ["__typename": "Query", "listImpossibles": listImpossibles.flatMap { $0.snapshot }])
    }

    public var listImpossibles: ListImpossible? {
      get {
        return (snapshot["listImpossibles"] as? Snapshot).flatMap { ListImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listImpossibles")
      }
    }

    public struct ListImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelImpossibleConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelImpossibleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Impossible"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var userId: String? {
          get {
            return snapshot["userID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncImpossiblesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncImpossibles($filter: ModelImpossibleFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncImpossibles(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      userID\n      ttime\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelImpossibleFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelImpossibleFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncImpossibles", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncImpossibles: SyncImpossible? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncImpossibles": syncImpossibles.flatMap { $0.snapshot }])
    }

    public var syncImpossibles: SyncImpossible? {
      get {
        return (snapshot["syncImpossibles"] as? Snapshot).flatMap { SyncImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncImpossibles")
      }
    }

    public struct SyncImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelImpossibleConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelImpossibleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Impossible"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var userId: String? {
          get {
            return snapshot["userID"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetMyScheduleQuery: GraphQLQuery {
  public static let operationString =
    "query GetMySchedule($id: ID!) {\n  getMySchedule(id: $id) {\n    __typename\n    id\n    userID\n    scheduleID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getMySchedule", arguments: ["id": GraphQLVariable("id")], type: .object(GetMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getMySchedule: GetMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Query", "getMySchedule": getMySchedule.flatMap { $0.snapshot }])
    }

    public var getMySchedule: GetMySchedule? {
      get {
        return (snapshot["getMySchedule"] as? Snapshot).flatMap { GetMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getMySchedule")
      }
    }

    public struct GetMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["MySchedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var scheduleId: GraphQLID? {
        get {
          return snapshot["scheduleID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListMySchedulesQuery: GraphQLQuery {
  public static let operationString =
    "query ListMySchedules($filter: ModelMyScheduleFilterInput, $limit: Int, $nextToken: String) {\n  listMySchedules(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      userID\n      scheduleID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelMyScheduleFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelMyScheduleFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listMySchedules", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listMySchedules: ListMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Query", "listMySchedules": listMySchedules.flatMap { $0.snapshot }])
    }

    public var listMySchedules: ListMySchedule? {
      get {
        return (snapshot["listMySchedules"] as? Snapshot).flatMap { ListMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listMySchedules")
      }
    }

    public struct ListMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMyScheduleConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["MySchedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var scheduleId: GraphQLID? {
          get {
            return snapshot["scheduleID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "scheduleID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncMySchedulesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncMySchedules($filter: ModelMyScheduleFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncMySchedules(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      userID\n      scheduleID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelMyScheduleFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelMyScheduleFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncMySchedules", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncMySchedules: SyncMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncMySchedules": syncMySchedules.flatMap { $0.snapshot }])
    }

    public var syncMySchedules: SyncMySchedule? {
      get {
        return (snapshot["syncMySchedules"] as? Snapshot).flatMap { SyncMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncMySchedules")
      }
    }

    public struct SyncMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMyScheduleConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["MySchedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var scheduleId: GraphQLID? {
          get {
            return snapshot["scheduleID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "scheduleID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetScheduleQuery: GraphQLQuery {
  public static let operationString =
    "query GetSchedule($id: ID!) {\n  getSchedule(id: $id) {\n    __typename\n    id\n    Reservation\n    ttime\n    time\n    BOOK\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getSchedule", arguments: ["id": GraphQLVariable("id")], type: .object(GetSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getSchedule: GetSchedule? = nil) {
      self.init(snapshot: ["__typename": "Query", "getSchedule": getSchedule.flatMap { $0.snapshot }])
    }

    public var getSchedule: GetSchedule? {
      get {
        return (snapshot["getSchedule"] as? Snapshot).flatMap { GetSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getSchedule")
      }
    }

    public struct GetSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["Schedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("Reservation", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("BOOK", type: .scalar(String.self)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reservation: String? {
        get {
          return snapshot["Reservation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Reservation")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      public var book: String? {
        get {
          return snapshot["BOOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "BOOK")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class ListSchedulesQuery: GraphQLQuery {
  public static let operationString =
    "query ListSchedules($filter: ModelScheduleFilterInput, $limit: Int, $nextToken: String) {\n  listSchedules(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelScheduleFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelScheduleFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listSchedules", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listSchedules: ListSchedule? = nil) {
      self.init(snapshot: ["__typename": "Query", "listSchedules": listSchedules.flatMap { $0.snapshot }])
    }

    public var listSchedules: ListSchedule? {
      get {
        return (snapshot["listSchedules"] as? Snapshot).flatMap { ListSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listSchedules")
      }
    }

    public struct ListSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelScheduleConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class SyncSchedulesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncSchedules($filter: ModelScheduleFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncSchedules(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelScheduleFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelScheduleFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncSchedules", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncSchedules: SyncSchedule? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncSchedules": syncSchedules.flatMap { $0.snapshot }])
    }

    public var syncSchedules: SyncSchedule? {
      get {
        return (snapshot["syncSchedules"] as? Snapshot).flatMap { SyncSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncSchedules")
      }
    }

    public struct SyncSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelScheduleConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class GetQuestionnarieQuery: GraphQLQuery {
  public static let operationString =
    "query GetQuestionnarie($id: ID!) {\n  getQuestionnarie(id: $id) {\n    __typename\n    id\n    content\n    Q1\n    Q2\n    Q3\n    Q4\n    Q5\n    Q6\n    Q7\n    userID\n    chatroomID\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getQuestionnarie", arguments: ["id": GraphQLVariable("id")], type: .object(GetQuestionnarie.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getQuestionnarie: GetQuestionnarie? = nil) {
      self.init(snapshot: ["__typename": "Query", "getQuestionnarie": getQuestionnarie.flatMap { $0.snapshot }])
    }

    public var getQuestionnarie: GetQuestionnarie? {
      get {
        return (snapshot["getQuestionnarie"] as? Snapshot).flatMap { GetQuestionnarie(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getQuestionnarie")
      }
    }

    public struct GetQuestionnarie: GraphQLSelectionSet {
      public static let possibleTypes = ["Questionnarie"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("Q1", type: .scalar(String.self)),
        GraphQLField("Q2", type: .scalar(String.self)),
        GraphQLField("Q3", type: .scalar(String.self)),
        GraphQLField("Q4", type: .scalar(String.self)),
        GraphQLField("Q5", type: .scalar(String.self)),
        GraphQLField("Q6", type: .scalar(String.self)),
        GraphQLField("Q7", type: .list(.scalar(String.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var q1: String? {
        get {
          return snapshot["Q1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q1")
        }
      }

      public var q2: String? {
        get {
          return snapshot["Q2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q2")
        }
      }

      public var q3: String? {
        get {
          return snapshot["Q3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q3")
        }
      }

      public var q4: String? {
        get {
          return snapshot["Q4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q4")
        }
      }

      public var q5: String? {
        get {
          return snapshot["Q5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q5")
        }
      }

      public var q6: String? {
        get {
          return snapshot["Q6"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q6")
        }
      }

      public var q7: [String?]? {
        get {
          return snapshot["Q7"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q7")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListQuestionnariesQuery: GraphQLQuery {
  public static let operationString =
    "query ListQuestionnaries($filter: ModelQuestionnarieFilterInput, $limit: Int, $nextToken: String) {\n  listQuestionnaries(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      content\n      Q1\n      Q2\n      Q3\n      Q4\n      Q5\n      Q6\n      Q7\n      userID\n      chatroomID\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelQuestionnarieFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelQuestionnarieFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listQuestionnaries", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListQuestionnary.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listQuestionnaries: ListQuestionnary? = nil) {
      self.init(snapshot: ["__typename": "Query", "listQuestionnaries": listQuestionnaries.flatMap { $0.snapshot }])
    }

    public var listQuestionnaries: ListQuestionnary? {
      get {
        return (snapshot["listQuestionnaries"] as? Snapshot).flatMap { ListQuestionnary(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listQuestionnaries")
      }
    }

    public struct ListQuestionnary: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelQuestionnarieConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Questionnarie"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("Q1", type: .scalar(String.self)),
          GraphQLField("Q2", type: .scalar(String.self)),
          GraphQLField("Q3", type: .scalar(String.self)),
          GraphQLField("Q4", type: .scalar(String.self)),
          GraphQLField("Q5", type: .scalar(String.self)),
          GraphQLField("Q6", type: .scalar(String.self)),
          GraphQLField("Q7", type: .list(.scalar(String.self))),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var q1: String? {
          get {
            return snapshot["Q1"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q1")
          }
        }

        public var q2: String? {
          get {
            return snapshot["Q2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q2")
          }
        }

        public var q3: String? {
          get {
            return snapshot["Q3"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q3")
          }
        }

        public var q4: String? {
          get {
            return snapshot["Q4"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q4")
          }
        }

        public var q5: String? {
          get {
            return snapshot["Q5"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q5")
          }
        }

        public var q6: String? {
          get {
            return snapshot["Q6"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q6")
          }
        }

        public var q7: [String?]? {
          get {
            return snapshot["Q7"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q7")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncQuestionnariesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncQuestionnaries($filter: ModelQuestionnarieFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncQuestionnaries(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      content\n      Q1\n      Q2\n      Q3\n      Q4\n      Q5\n      Q6\n      Q7\n      userID\n      chatroomID\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelQuestionnarieFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelQuestionnarieFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncQuestionnaries", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncQuestionnary.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncQuestionnaries: SyncQuestionnary? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncQuestionnaries": syncQuestionnaries.flatMap { $0.snapshot }])
    }

    public var syncQuestionnaries: SyncQuestionnary? {
      get {
        return (snapshot["syncQuestionnaries"] as? Snapshot).flatMap { SyncQuestionnary(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncQuestionnaries")
      }
    }

    public struct SyncQuestionnary: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelQuestionnarieConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Questionnarie"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("Q1", type: .scalar(String.self)),
          GraphQLField("Q2", type: .scalar(String.self)),
          GraphQLField("Q3", type: .scalar(String.self)),
          GraphQLField("Q4", type: .scalar(String.self)),
          GraphQLField("Q5", type: .scalar(String.self)),
          GraphQLField("Q6", type: .scalar(String.self)),
          GraphQLField("Q7", type: .list(.scalar(String.self))),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var q1: String? {
          get {
            return snapshot["Q1"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q1")
          }
        }

        public var q2: String? {
          get {
            return snapshot["Q2"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q2")
          }
        }

        public var q3: String? {
          get {
            return snapshot["Q3"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q3")
          }
        }

        public var q4: String? {
          get {
            return snapshot["Q4"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q4")
          }
        }

        public var q5: String? {
          get {
            return snapshot["Q5"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q5")
          }
        }

        public var q6: String? {
          get {
            return snapshot["Q6"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q6")
          }
        }

        public var q7: [String?]? {
          get {
            return snapshot["Q7"] as? [String?]
          }
          set {
            snapshot.updateValue(newValue, forKey: "Q7")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetChatRoomQuery: GraphQLQuery {
  public static let operationString =
    "query GetChatRoom($id: ID!) {\n  getChatRoom(id: $id) {\n    __typename\n    id\n    newMessages\n    name\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    LastMessage {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    chatRoomLastMessageId\n    chatRoomScheduleId\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getChatRoom", arguments: ["id": GraphQLVariable("id")], type: .object(GetChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getChatRoom: GetChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Query", "getChatRoom": getChatRoom.flatMap { $0.snapshot }])
    }

    public var getChatRoom: GetChatRoom? {
      get {
        return (snapshot["getChatRoom"] as? Snapshot).flatMap { GetChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getChatRoom")
      }
    }

    public struct GetChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoom"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newMessages", type: .scalar(Int.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("LastMessage", type: .object(LastMessage.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("Schedule", type: .object(Schedule.selections)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
        GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newMessages: Int? {
        get {
          return snapshot["newMessages"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "newMessages")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var lastMessage: LastMessage? {
        get {
          return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var schedule: Schedule? {
        get {
          return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
        }
      }

      public var state: String? {
        get {
          return snapshot["state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var chatRoomLastMessageId: GraphQLID? {
        get {
          return snapshot["chatRoomLastMessageId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
        }
      }

      public var chatRoomScheduleId: GraphQLID? {
        get {
          return snapshot["chatRoomScheduleId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct LastMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class ListChatRoomsQuery: GraphQLQuery {
  public static let operationString =
    "query ListChatRooms($filter: ModelChatRoomFilterInput, $limit: Int, $nextToken: String) {\n  listChatRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelChatRoomFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelChatRoomFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listChatRooms", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listChatRooms: ListChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Query", "listChatRooms": listChatRooms.flatMap { $0.snapshot }])
    }

    public var listChatRooms: ListChatRoom? {
      get {
        return (snapshot["listChatRooms"] as? Snapshot).flatMap { ListChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listChatRooms")
      }
    }

    public struct ListChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelChatRoomConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelChatRoomConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class SyncChatRoomsQuery: GraphQLQuery {
  public static let operationString =
    "query SyncChatRooms($filter: ModelChatRoomFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncChatRooms(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelChatRoomFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelChatRoomFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncChatRooms", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncChatRooms: SyncChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncChatRooms": syncChatRooms.flatMap { $0.snapshot }])
    }

    public var syncChatRooms: SyncChatRoom? {
      get {
        return (snapshot["syncChatRooms"] as? Snapshot).flatMap { SyncChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncChatRooms")
      }
    }

    public struct SyncChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelChatRoomConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelChatRoomConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class GetMessageQuery: GraphQLQuery {
  public static let operationString =
    "query GetMessage($id: ID!) {\n  getMessage(id: $id) {\n    __typename\n    id\n    image\n    status\n    content\n    userID\n    chatroomID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getMessage", arguments: ["id": GraphQLVariable("id")], type: .object(GetMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getMessage: GetMessage? = nil) {
      self.init(snapshot: ["__typename": "Query", "getMessage": getMessage.flatMap { $0.snapshot }])
    }

    public var getMessage: GetMessage? {
      get {
        return (snapshot["getMessage"] as? Snapshot).flatMap { GetMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getMessage")
      }
    }

    public struct GetMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("image", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(MessageStatus.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var image: String? {
        get {
          return snapshot["image"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image")
        }
      }

      public var status: MessageStatus? {
        get {
          return snapshot["status"] as? MessageStatus
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class ListMessagesQuery: GraphQLQuery {
  public static let operationString =
    "query ListMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String) {\n  listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelMessageFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelMessageFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listMessages", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listMessages: ListMessage? = nil) {
      self.init(snapshot: ["__typename": "Query", "listMessages": listMessages.flatMap { $0.snapshot }])
    }

    public var listMessages: ListMessage? {
      get {
        return (snapshot["listMessages"] as? Snapshot).flatMap { ListMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listMessages")
      }
    }

    public struct ListMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMessageConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class SyncMessagesQuery: GraphQLQuery {
  public static let operationString =
    "query SyncMessages($filter: ModelMessageFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncMessages(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelMessageFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelMessageFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncMessages", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncMessages: SyncMessage? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncMessages": syncMessages.flatMap { $0.snapshot }])
    }

    public var syncMessages: SyncMessage? {
      get {
        return (snapshot["syncMessages"] as? Snapshot).flatMap { SyncMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncMessages")
      }
    }

    public struct SyncMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelMessageConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }
    }
  }
}

public final class GetUserQuery: GraphQLQuery {
  public static let operationString =
    "query GetUser($id: ID!) {\n  getUser(id: $id) {\n    __typename\n    id\n    name\n    patientNumber\n    phoneNumber\n    email\n    status\n    lastOnlineAt\n    schedules {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    chatrooms {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    sex\n    born\n    phoneNOK\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getUser", arguments: ["id": GraphQLVariable("id")], type: .object(GetUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getUser: GetUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "getUser": getUser.flatMap { $0.snapshot }])
    }

    public var getUser: GetUser? {
      get {
        return (snapshot["getUser"] as? Snapshot).flatMap { GetUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getUser")
      }
    }

    public struct GetUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("patientNumber", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
        GraphQLField("schedules", type: .object(Schedule.selections)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("chatrooms", type: .object(Chatroom.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("sex", type: .scalar(String.self)),
        GraphQLField("born", type: .scalar(String.self)),
        GraphQLField("phoneNOK", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var patientNumber: String? {
        get {
          return snapshot["patientNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "patientNumber")
        }
      }

      public var phoneNumber: String? {
        get {
          return snapshot["phoneNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      public var email: String? {
        get {
          return snapshot["email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var lastOnlineAt: Int? {
        get {
          return snapshot["lastOnlineAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastOnlineAt")
        }
      }

      public var schedules: Schedule? {
        get {
          return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var chatrooms: Chatroom? {
        get {
          return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var sex: String? {
        get {
          return snapshot["sex"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sex")
        }
      }

      public var born: String? {
        get {
          return snapshot["born"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "born")
        }
      }

      public var phoneNok: String? {
        get {
          return snapshot["phoneNOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNOK")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Chatroom: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class ListUsersQuery: GraphQLQuery {
  public static let operationString =
    "query ListUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String) {\n  listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listUsers: ListUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "listUsers": listUsers.flatMap { $0.snapshot }])
    }

    public var listUsers: ListUser? {
      get {
        return (snapshot["listUsers"] as? Snapshot).flatMap { ListUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listUsers")
      }
    }

    public struct ListUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class SyncUsersQuery: GraphQLQuery {
  public static let operationString =
    "query SyncUsers($filter: ModelUserFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncUsers(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelUserFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncUsers: SyncUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncUsers": syncUsers.flatMap { $0.snapshot }])
    }

    public var syncUsers: SyncUser? {
      get {
        return (snapshot["syncUsers"] as? Snapshot).flatMap { SyncUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncUsers")
      }
    }

    public struct SyncUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class GetScheduleUserQuery: GraphQLQuery {
  public static let operationString =
    "query GetScheduleUser($id: ID!) {\n  getScheduleUser(id: $id) {\n    __typename\n    id\n    scheduleID\n    userID\n    schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getScheduleUser", arguments: ["id": GraphQLVariable("id")], type: .object(GetScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getScheduleUser: GetScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "getScheduleUser": getScheduleUser.flatMap { $0.snapshot }])
    }

    public var getScheduleUser: GetScheduleUser? {
      get {
        return (snapshot["getScheduleUser"] as? Snapshot).flatMap { GetScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getScheduleUser")
      }
    }

    public struct GetScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ScheduleUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var scheduleId: GraphQLID {
        get {
          return snapshot["scheduleID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var schedule: Schedule {
        get {
          return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "schedule")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class ListScheduleUsersQuery: GraphQLQuery {
  public static let operationString =
    "query ListScheduleUsers($filter: ModelScheduleUserFilterInput, $limit: Int, $nextToken: String) {\n  listScheduleUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      scheduleID\n      userID\n      schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      user {\n        __typename\n        id\n        name\n        patientNumber\n        phoneNumber\n        email\n        status\n        lastOnlineAt\n        state\n        sex\n        born\n        phoneNOK\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelScheduleUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelScheduleUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listScheduleUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listScheduleUsers: ListScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "listScheduleUsers": listScheduleUsers.flatMap { $0.snapshot }])
    }

    public var listScheduleUsers: ListScheduleUser? {
      get {
        return (snapshot["listScheduleUsers"] as? Snapshot).flatMap { ListScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listScheduleUsers")
      }
    }

    public struct ListScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelScheduleUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["ScheduleUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
          GraphQLField("user", type: .nonNull(.object(User.selections))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var scheduleId: GraphQLID {
          get {
            return snapshot["scheduleID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "scheduleID")
          }
        }

        public var userId: GraphQLID {
          get {
            return snapshot["userID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var schedule: Schedule {
          get {
            return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "schedule")
          }
        }

        public var user: User {
          get {
            return User(snapshot: snapshot["user"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "user")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("patientNumber", type: .scalar(String.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(String.self)),
            GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("sex", type: .scalar(String.self)),
            GraphQLField("born", type: .scalar(String.self)),
            GraphQLField("phoneNOK", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, state: Int? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String? {
            get {
              return snapshot["name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var patientNumber: String? {
            get {
              return snapshot["patientNumber"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "patientNumber")
            }
          }

          public var phoneNumber: String? {
            get {
              return snapshot["phoneNumber"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          public var email: String? {
            get {
              return snapshot["email"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var status: String? {
            get {
              return snapshot["status"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var lastOnlineAt: Int? {
            get {
              return snapshot["lastOnlineAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "lastOnlineAt")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var sex: String? {
            get {
              return snapshot["sex"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sex")
            }
          }

          public var born: String? {
            get {
              return snapshot["born"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "born")
            }
          }

          public var phoneNok: String? {
            get {
              return snapshot["phoneNOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phoneNOK")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class SyncScheduleUsersQuery: GraphQLQuery {
  public static let operationString =
    "query SyncScheduleUsers($filter: ModelScheduleUserFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncScheduleUsers(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      scheduleID\n      userID\n      schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      user {\n        __typename\n        id\n        name\n        patientNumber\n        phoneNumber\n        email\n        status\n        lastOnlineAt\n        state\n        sex\n        born\n        phoneNOK\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelScheduleUserFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelScheduleUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncScheduleUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncScheduleUsers: SyncScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncScheduleUsers": syncScheduleUsers.flatMap { $0.snapshot }])
    }

    public var syncScheduleUsers: SyncScheduleUser? {
      get {
        return (snapshot["syncScheduleUsers"] as? Snapshot).flatMap { SyncScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncScheduleUsers")
      }
    }

    public struct SyncScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelScheduleUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["ScheduleUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
          GraphQLField("user", type: .nonNull(.object(User.selections))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var scheduleId: GraphQLID {
          get {
            return snapshot["scheduleID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "scheduleID")
          }
        }

        public var userId: GraphQLID {
          get {
            return snapshot["userID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var schedule: Schedule {
          get {
            return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "schedule")
          }
        }

        public var user: User {
          get {
            return User(snapshot: snapshot["user"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "user")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("patientNumber", type: .scalar(String.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(String.self)),
            GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("sex", type: .scalar(String.self)),
            GraphQLField("born", type: .scalar(String.self)),
            GraphQLField("phoneNOK", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, state: Int? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String? {
            get {
              return snapshot["name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var patientNumber: String? {
            get {
              return snapshot["patientNumber"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "patientNumber")
            }
          }

          public var phoneNumber: String? {
            get {
              return snapshot["phoneNumber"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          public var email: String? {
            get {
              return snapshot["email"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var status: String? {
            get {
              return snapshot["status"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var lastOnlineAt: Int? {
            get {
              return snapshot["lastOnlineAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "lastOnlineAt")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var sex: String? {
            get {
              return snapshot["sex"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sex")
            }
          }

          public var born: String? {
            get {
              return snapshot["born"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "born")
            }
          }

          public var phoneNok: String? {
            get {
              return snapshot["phoneNOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phoneNOK")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class GetChatRoomUserQuery: GraphQLQuery {
  public static let operationString =
    "query GetChatRoomUser($id: ID!) {\n  getChatRoomUser(id: $id) {\n    __typename\n    id\n    chatRoomID\n    userID\n    chatRoom {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var id: GraphQLID

  public init(id: GraphQLID) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("getChatRoomUser", arguments: ["id": GraphQLVariable("id")], type: .object(GetChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(getChatRoomUser: GetChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "getChatRoomUser": getChatRoomUser.flatMap { $0.snapshot }])
    }

    public var getChatRoomUser: GetChatRoomUser? {
      get {
        return (snapshot["getChatRoomUser"] as? Snapshot).flatMap { GetChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "getChatRoomUser")
      }
    }

    public struct GetChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var chatRoomId: GraphQLID {
        get {
          return snapshot["chatRoomID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatRoom: ChatRoom {
        get {
          return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct ChatRoom: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class ListChatRoomUsersQuery: GraphQLQuery {
  public static let operationString =
    "query ListChatRoomUsers($filter: ModelChatRoomUserFilterInput, $limit: Int, $nextToken: String) {\n  listChatRoomUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    __typename\n    items {\n      __typename\n      id\n      chatRoomID\n      userID\n      chatRoom {\n        __typename\n        id\n        newMessages\n        name\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n        chatRoomLastMessageId\n        chatRoomScheduleId\n      }\n      user {\n        __typename\n        id\n        name\n        patientNumber\n        phoneNumber\n        email\n        status\n        lastOnlineAt\n        state\n        sex\n        born\n        phoneNOK\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelChatRoomUserFilterInput?
  public var limit: Int?
  public var nextToken: String?

  public init(filter: ModelChatRoomUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("listChatRoomUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken")], type: .object(ListChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(listChatRoomUsers: ListChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "listChatRoomUsers": listChatRoomUsers.flatMap { $0.snapshot }])
    }

    public var listChatRoomUsers: ListChatRoomUser? {
      get {
        return (snapshot["listChatRoomUsers"] as? Snapshot).flatMap { ListChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "listChatRoomUsers")
      }
    }

    public struct ListChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelChatRoomUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoomUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
          GraphQLField("user", type: .nonNull(.object(User.selections))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var chatRoomId: GraphQLID {
          get {
            return snapshot["chatRoomID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomID")
          }
        }

        public var userId: GraphQLID {
          get {
            return snapshot["userID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatRoom: ChatRoom {
          get {
            return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
          }
        }

        public var user: User {
          get {
            return User(snapshot: snapshot["user"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "user")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct ChatRoom: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoom"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("newMessages", type: .scalar(Int.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
            GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var newMessages: Int? {
            get {
              return snapshot["newMessages"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "newMessages")
            }
          }

          public var name: String? {
            get {
              return snapshot["name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var state: String? {
            get {
              return snapshot["state"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var chatRoomLastMessageId: GraphQLID? {
            get {
              return snapshot["chatRoomLastMessageId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
            }
          }

          public var chatRoomScheduleId: GraphQLID? {
            get {
              return snapshot["chatRoomScheduleId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("patientNumber", type: .scalar(String.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(String.self)),
            GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("sex", type: .scalar(String.self)),
            GraphQLField("born", type: .scalar(String.self)),
            GraphQLField("phoneNOK", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, state: Int? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String? {
            get {
              return snapshot["name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var patientNumber: String? {
            get {
              return snapshot["patientNumber"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "patientNumber")
            }
          }

          public var phoneNumber: String? {
            get {
              return snapshot["phoneNumber"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          public var email: String? {
            get {
              return snapshot["email"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var status: String? {
            get {
              return snapshot["status"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var lastOnlineAt: Int? {
            get {
              return snapshot["lastOnlineAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "lastOnlineAt")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var sex: String? {
            get {
              return snapshot["sex"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sex")
            }
          }

          public var born: String? {
            get {
              return snapshot["born"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "born")
            }
          }

          public var phoneNok: String? {
            get {
              return snapshot["phoneNOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phoneNOK")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class SyncChatRoomUsersQuery: GraphQLQuery {
  public static let operationString =
    "query SyncChatRoomUsers($filter: ModelChatRoomUserFilterInput, $limit: Int, $nextToken: String, $lastSync: AWSTimestamp) {\n  syncChatRoomUsers(filter: $filter, limit: $limit, nextToken: $nextToken, lastSync: $lastSync) {\n    __typename\n    items {\n      __typename\n      id\n      chatRoomID\n      userID\n      chatRoom {\n        __typename\n        id\n        newMessages\n        name\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n        chatRoomLastMessageId\n        chatRoomScheduleId\n      }\n      user {\n        __typename\n        id\n        name\n        patientNumber\n        phoneNumber\n        email\n        status\n        lastOnlineAt\n        state\n        sex\n        born\n        phoneNOK\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    nextToken\n    startedAt\n  }\n}"

  public var filter: ModelChatRoomUserFilterInput?
  public var limit: Int?
  public var nextToken: String?
  public var lastSync: Int?

  public init(filter: ModelChatRoomUserFilterInput? = nil, limit: Int? = nil, nextToken: String? = nil, lastSync: Int? = nil) {
    self.filter = filter
    self.limit = limit
    self.nextToken = nextToken
    self.lastSync = lastSync
  }

  public var variables: GraphQLMap? {
    return ["filter": filter, "limit": limit, "nextToken": nextToken, "lastSync": lastSync]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Query"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("syncChatRoomUsers", arguments: ["filter": GraphQLVariable("filter"), "limit": GraphQLVariable("limit"), "nextToken": GraphQLVariable("nextToken"), "lastSync": GraphQLVariable("lastSync")], type: .object(SyncChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(syncChatRoomUsers: SyncChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Query", "syncChatRoomUsers": syncChatRoomUsers.flatMap { $0.snapshot }])
    }

    public var syncChatRoomUsers: SyncChatRoomUser? {
      get {
        return (snapshot["syncChatRoomUsers"] as? Snapshot).flatMap { SyncChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "syncChatRoomUsers")
      }
    }

    public struct SyncChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ModelChatRoomUserConnection"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
        GraphQLField("nextToken", type: .scalar(String.self)),
        GraphQLField("startedAt", type: .scalar(Int.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
        self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var items: [Item?] {
        get {
          return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
        }
        set {
          snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
        }
      }

      public var nextToken: String? {
        get {
          return snapshot["nextToken"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "nextToken")
        }
      }

      public var startedAt: Int? {
        get {
          return snapshot["startedAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "startedAt")
        }
      }

      public struct Item: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoomUser"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
          GraphQLField("user", type: .nonNull(.object(User.selections))),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var chatRoomId: GraphQLID {
          get {
            return snapshot["chatRoomID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomID")
          }
        }

        public var userId: GraphQLID {
          get {
            return snapshot["userID"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatRoom: ChatRoom {
          get {
            return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
          }
        }

        public var user: User {
          get {
            return User(snapshot: snapshot["user"]! as! Snapshot)
          }
          set {
            snapshot.updateValue(newValue.snapshot, forKey: "user")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct ChatRoom: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoom"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("newMessages", type: .scalar(Int.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
            GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
            GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
            self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var newMessages: Int? {
            get {
              return snapshot["newMessages"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "newMessages")
            }
          }

          public var name: String? {
            get {
              return snapshot["name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var state: String? {
            get {
              return snapshot["state"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }

          public var chatRoomLastMessageId: GraphQLID? {
            get {
              return snapshot["chatRoomLastMessageId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
            }
          }

          public var chatRoomScheduleId: GraphQLID? {
            get {
              return snapshot["chatRoomScheduleId"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["User"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("patientNumber", type: .scalar(String.self)),
            GraphQLField("phoneNumber", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(String.self)),
            GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("sex", type: .scalar(String.self)),
            GraphQLField("born", type: .scalar(String.self)),
            GraphQLField("phoneNOK", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, state: Int? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "state": state, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var name: String? {
            get {
              return snapshot["name"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "name")
            }
          }

          public var patientNumber: String? {
            get {
              return snapshot["patientNumber"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "patientNumber")
            }
          }

          public var phoneNumber: String? {
            get {
              return snapshot["phoneNumber"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phoneNumber")
            }
          }

          public var email: String? {
            get {
              return snapshot["email"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "email")
            }
          }

          public var status: String? {
            get {
              return snapshot["status"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var lastOnlineAt: Int? {
            get {
              return snapshot["lastOnlineAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "lastOnlineAt")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var sex: String? {
            get {
              return snapshot["sex"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "sex")
            }
          }

          public var born: String? {
            get {
              return snapshot["born"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "born")
            }
          }

          public var phoneNok: String? {
            get {
              return snapshot["phoneNOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "phoneNOK")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnCreateImpossibleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateImpossible($filter: ModelSubscriptionImpossibleFilterInput) {\n  onCreateImpossible(filter: $filter) {\n    __typename\n    id\n    userID\n    ttime\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionImpossibleFilterInput?

  public init(filter: ModelSubscriptionImpossibleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateImpossible", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateImpossible: OnCreateImpossible? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateImpossible": onCreateImpossible.flatMap { $0.snapshot }])
    }

    public var onCreateImpossible: OnCreateImpossible? {
      get {
        return (snapshot["onCreateImpossible"] as? Snapshot).flatMap { OnCreateImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateImpossible")
      }
    }

    public struct OnCreateImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["Impossible"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: String? {
        get {
          return snapshot["userID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateImpossibleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateImpossible($filter: ModelSubscriptionImpossibleFilterInput) {\n  onUpdateImpossible(filter: $filter) {\n    __typename\n    id\n    userID\n    ttime\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionImpossibleFilterInput?

  public init(filter: ModelSubscriptionImpossibleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateImpossible", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateImpossible: OnUpdateImpossible? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateImpossible": onUpdateImpossible.flatMap { $0.snapshot }])
    }

    public var onUpdateImpossible: OnUpdateImpossible? {
      get {
        return (snapshot["onUpdateImpossible"] as? Snapshot).flatMap { OnUpdateImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateImpossible")
      }
    }

    public struct OnUpdateImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["Impossible"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: String? {
        get {
          return snapshot["userID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteImpossibleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteImpossible($filter: ModelSubscriptionImpossibleFilterInput) {\n  onDeleteImpossible(filter: $filter) {\n    __typename\n    id\n    userID\n    ttime\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionImpossibleFilterInput?

  public init(filter: ModelSubscriptionImpossibleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteImpossible", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteImpossible.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteImpossible: OnDeleteImpossible? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteImpossible": onDeleteImpossible.flatMap { $0.snapshot }])
    }

    public var onDeleteImpossible: OnDeleteImpossible? {
      get {
        return (snapshot["onDeleteImpossible"] as? Snapshot).flatMap { OnDeleteImpossible(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteImpossible")
      }
    }

    public struct OnDeleteImpossible: GraphQLSelectionSet {
      public static let possibleTypes = ["Impossible"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: String? = nil, ttime: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Impossible", "id": id, "userID": userId, "ttime": ttime, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: String? {
        get {
          return snapshot["userID"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnCreateMyScheduleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateMySchedule($filter: ModelSubscriptionMyScheduleFilterInput) {\n  onCreateMySchedule(filter: $filter) {\n    __typename\n    id\n    userID\n    scheduleID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMyScheduleFilterInput?

  public init(filter: ModelSubscriptionMyScheduleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateMySchedule", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateMySchedule: OnCreateMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateMySchedule": onCreateMySchedule.flatMap { $0.snapshot }])
    }

    public var onCreateMySchedule: OnCreateMySchedule? {
      get {
        return (snapshot["onCreateMySchedule"] as? Snapshot).flatMap { OnCreateMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateMySchedule")
      }
    }

    public struct OnCreateMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["MySchedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var scheduleId: GraphQLID? {
        get {
          return snapshot["scheduleID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateMyScheduleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateMySchedule($filter: ModelSubscriptionMyScheduleFilterInput) {\n  onUpdateMySchedule(filter: $filter) {\n    __typename\n    id\n    userID\n    scheduleID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMyScheduleFilterInput?

  public init(filter: ModelSubscriptionMyScheduleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateMySchedule", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateMySchedule: OnUpdateMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateMySchedule": onUpdateMySchedule.flatMap { $0.snapshot }])
    }

    public var onUpdateMySchedule: OnUpdateMySchedule? {
      get {
        return (snapshot["onUpdateMySchedule"] as? Snapshot).flatMap { OnUpdateMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateMySchedule")
      }
    }

    public struct OnUpdateMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["MySchedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var scheduleId: GraphQLID? {
        get {
          return snapshot["scheduleID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteMyScheduleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteMySchedule($filter: ModelSubscriptionMyScheduleFilterInput) {\n  onDeleteMySchedule(filter: $filter) {\n    __typename\n    id\n    userID\n    scheduleID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMyScheduleFilterInput?

  public init(filter: ModelSubscriptionMyScheduleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteMySchedule", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteMySchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteMySchedule: OnDeleteMySchedule? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteMySchedule": onDeleteMySchedule.flatMap { $0.snapshot }])
    }

    public var onDeleteMySchedule: OnDeleteMySchedule? {
      get {
        return (snapshot["onDeleteMySchedule"] as? Snapshot).flatMap { OnDeleteMySchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteMySchedule")
      }
    }

    public struct OnDeleteMySchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["MySchedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var scheduleId: GraphQLID? {
        get {
          return snapshot["scheduleID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnCreateScheduleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateSchedule($filter: ModelSubscriptionScheduleFilterInput) {\n  onCreateSchedule(filter: $filter) {\n    __typename\n    id\n    Reservation\n    ttime\n    time\n    BOOK\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionScheduleFilterInput?

  public init(filter: ModelSubscriptionScheduleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateSchedule", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateSchedule: OnCreateSchedule? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateSchedule": onCreateSchedule.flatMap { $0.snapshot }])
    }

    public var onCreateSchedule: OnCreateSchedule? {
      get {
        return (snapshot["onCreateSchedule"] as? Snapshot).flatMap { OnCreateSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateSchedule")
      }
    }

    public struct OnCreateSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["Schedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("Reservation", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("BOOK", type: .scalar(String.self)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reservation: String? {
        get {
          return snapshot["Reservation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Reservation")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      public var book: String? {
        get {
          return snapshot["BOOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "BOOK")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateScheduleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateSchedule($filter: ModelSubscriptionScheduleFilterInput) {\n  onUpdateSchedule(filter: $filter) {\n    __typename\n    id\n    Reservation\n    ttime\n    time\n    BOOK\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionScheduleFilterInput?

  public init(filter: ModelSubscriptionScheduleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateSchedule", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateSchedule: OnUpdateSchedule? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateSchedule": onUpdateSchedule.flatMap { $0.snapshot }])
    }

    public var onUpdateSchedule: OnUpdateSchedule? {
      get {
        return (snapshot["onUpdateSchedule"] as? Snapshot).flatMap { OnUpdateSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateSchedule")
      }
    }

    public struct OnUpdateSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["Schedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("Reservation", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("BOOK", type: .scalar(String.self)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reservation: String? {
        get {
          return snapshot["Reservation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Reservation")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      public var book: String? {
        get {
          return snapshot["BOOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "BOOK")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteScheduleSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteSchedule($filter: ModelSubscriptionScheduleFilterInput) {\n  onDeleteSchedule(filter: $filter) {\n    __typename\n    id\n    Reservation\n    ttime\n    time\n    BOOK\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionScheduleFilterInput?

  public init(filter: ModelSubscriptionScheduleFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteSchedule", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteSchedule.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteSchedule: OnDeleteSchedule? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteSchedule": onDeleteSchedule.flatMap { $0.snapshot }])
    }

    public var onDeleteSchedule: OnDeleteSchedule? {
      get {
        return (snapshot["onDeleteSchedule"] as? Snapshot).flatMap { OnDeleteSchedule(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteSchedule")
      }
    }

    public struct OnDeleteSchedule: GraphQLSelectionSet {
      public static let possibleTypes = ["Schedule"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("Reservation", type: .scalar(String.self)),
        GraphQLField("ttime", type: .scalar(String.self)),
        GraphQLField("time", type: .scalar(Int.self)),
        GraphQLField("BOOK", type: .scalar(String.self)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var reservation: String? {
        get {
          return snapshot["Reservation"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Reservation")
        }
      }

      public var ttime: String? {
        get {
          return snapshot["ttime"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "ttime")
        }
      }

      public var time: Int? {
        get {
          return snapshot["time"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "time")
        }
      }

      public var book: String? {
        get {
          return snapshot["BOOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "BOOK")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnCreateQuestionnarieSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateQuestionnarie($filter: ModelSubscriptionQuestionnarieFilterInput) {\n  onCreateQuestionnarie(filter: $filter) {\n    __typename\n    id\n    content\n    Q1\n    Q2\n    Q3\n    Q4\n    Q5\n    Q6\n    Q7\n    userID\n    chatroomID\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionQuestionnarieFilterInput?

  public init(filter: ModelSubscriptionQuestionnarieFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateQuestionnarie", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateQuestionnarie.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateQuestionnarie: OnCreateQuestionnarie? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateQuestionnarie": onCreateQuestionnarie.flatMap { $0.snapshot }])
    }

    public var onCreateQuestionnarie: OnCreateQuestionnarie? {
      get {
        return (snapshot["onCreateQuestionnarie"] as? Snapshot).flatMap { OnCreateQuestionnarie(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateQuestionnarie")
      }
    }

    public struct OnCreateQuestionnarie: GraphQLSelectionSet {
      public static let possibleTypes = ["Questionnarie"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("Q1", type: .scalar(String.self)),
        GraphQLField("Q2", type: .scalar(String.self)),
        GraphQLField("Q3", type: .scalar(String.self)),
        GraphQLField("Q4", type: .scalar(String.self)),
        GraphQLField("Q5", type: .scalar(String.self)),
        GraphQLField("Q6", type: .scalar(String.self)),
        GraphQLField("Q7", type: .list(.scalar(String.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var q1: String? {
        get {
          return snapshot["Q1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q1")
        }
      }

      public var q2: String? {
        get {
          return snapshot["Q2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q2")
        }
      }

      public var q3: String? {
        get {
          return snapshot["Q3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q3")
        }
      }

      public var q4: String? {
        get {
          return snapshot["Q4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q4")
        }
      }

      public var q5: String? {
        get {
          return snapshot["Q5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q5")
        }
      }

      public var q6: String? {
        get {
          return snapshot["Q6"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q6")
        }
      }

      public var q7: [String?]? {
        get {
          return snapshot["Q7"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q7")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateQuestionnarieSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateQuestionnarie($filter: ModelSubscriptionQuestionnarieFilterInput) {\n  onUpdateQuestionnarie(filter: $filter) {\n    __typename\n    id\n    content\n    Q1\n    Q2\n    Q3\n    Q4\n    Q5\n    Q6\n    Q7\n    userID\n    chatroomID\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionQuestionnarieFilterInput?

  public init(filter: ModelSubscriptionQuestionnarieFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateQuestionnarie", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateQuestionnarie.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateQuestionnarie: OnUpdateQuestionnarie? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateQuestionnarie": onUpdateQuestionnarie.flatMap { $0.snapshot }])
    }

    public var onUpdateQuestionnarie: OnUpdateQuestionnarie? {
      get {
        return (snapshot["onUpdateQuestionnarie"] as? Snapshot).flatMap { OnUpdateQuestionnarie(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateQuestionnarie")
      }
    }

    public struct OnUpdateQuestionnarie: GraphQLSelectionSet {
      public static let possibleTypes = ["Questionnarie"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("Q1", type: .scalar(String.self)),
        GraphQLField("Q2", type: .scalar(String.self)),
        GraphQLField("Q3", type: .scalar(String.self)),
        GraphQLField("Q4", type: .scalar(String.self)),
        GraphQLField("Q5", type: .scalar(String.self)),
        GraphQLField("Q6", type: .scalar(String.self)),
        GraphQLField("Q7", type: .list(.scalar(String.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var q1: String? {
        get {
          return snapshot["Q1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q1")
        }
      }

      public var q2: String? {
        get {
          return snapshot["Q2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q2")
        }
      }

      public var q3: String? {
        get {
          return snapshot["Q3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q3")
        }
      }

      public var q4: String? {
        get {
          return snapshot["Q4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q4")
        }
      }

      public var q5: String? {
        get {
          return snapshot["Q5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q5")
        }
      }

      public var q6: String? {
        get {
          return snapshot["Q6"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q6")
        }
      }

      public var q7: [String?]? {
        get {
          return snapshot["Q7"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q7")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteQuestionnarieSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteQuestionnarie($filter: ModelSubscriptionQuestionnarieFilterInput) {\n  onDeleteQuestionnarie(filter: $filter) {\n    __typename\n    id\n    content\n    Q1\n    Q2\n    Q3\n    Q4\n    Q5\n    Q6\n    Q7\n    userID\n    chatroomID\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionQuestionnarieFilterInput?

  public init(filter: ModelSubscriptionQuestionnarieFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteQuestionnarie", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteQuestionnarie.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteQuestionnarie: OnDeleteQuestionnarie? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteQuestionnarie": onDeleteQuestionnarie.flatMap { $0.snapshot }])
    }

    public var onDeleteQuestionnarie: OnDeleteQuestionnarie? {
      get {
        return (snapshot["onDeleteQuestionnarie"] as? Snapshot).flatMap { OnDeleteQuestionnarie(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteQuestionnarie")
      }
    }

    public struct OnDeleteQuestionnarie: GraphQLSelectionSet {
      public static let possibleTypes = ["Questionnarie"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("Q1", type: .scalar(String.self)),
        GraphQLField("Q2", type: .scalar(String.self)),
        GraphQLField("Q3", type: .scalar(String.self)),
        GraphQLField("Q4", type: .scalar(String.self)),
        GraphQLField("Q5", type: .scalar(String.self)),
        GraphQLField("Q6", type: .scalar(String.self)),
        GraphQLField("Q7", type: .list(.scalar(String.self))),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var q1: String? {
        get {
          return snapshot["Q1"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q1")
        }
      }

      public var q2: String? {
        get {
          return snapshot["Q2"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q2")
        }
      }

      public var q3: String? {
        get {
          return snapshot["Q3"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q3")
        }
      }

      public var q4: String? {
        get {
          return snapshot["Q4"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q4")
        }
      }

      public var q5: String? {
        get {
          return snapshot["Q5"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q5")
        }
      }

      public var q6: String? {
        get {
          return snapshot["Q6"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q6")
        }
      }

      public var q7: [String?]? {
        get {
          return snapshot["Q7"] as? [String?]
        }
        set {
          snapshot.updateValue(newValue, forKey: "Q7")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnCreateChatRoomSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateChatRoom($filter: ModelSubscriptionChatRoomFilterInput) {\n  onCreateChatRoom(filter: $filter) {\n    __typename\n    id\n    newMessages\n    name\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    LastMessage {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    chatRoomLastMessageId\n    chatRoomScheduleId\n  }\n}"

  public var filter: ModelSubscriptionChatRoomFilterInput?

  public init(filter: ModelSubscriptionChatRoomFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateChatRoom", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateChatRoom: OnCreateChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateChatRoom": onCreateChatRoom.flatMap { $0.snapshot }])
    }

    public var onCreateChatRoom: OnCreateChatRoom? {
      get {
        return (snapshot["onCreateChatRoom"] as? Snapshot).flatMap { OnCreateChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateChatRoom")
      }
    }

    public struct OnCreateChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoom"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newMessages", type: .scalar(Int.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("LastMessage", type: .object(LastMessage.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("Schedule", type: .object(Schedule.selections)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
        GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newMessages: Int? {
        get {
          return snapshot["newMessages"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "newMessages")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var lastMessage: LastMessage? {
        get {
          return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var schedule: Schedule? {
        get {
          return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
        }
      }

      public var state: String? {
        get {
          return snapshot["state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var chatRoomLastMessageId: GraphQLID? {
        get {
          return snapshot["chatRoomLastMessageId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
        }
      }

      public var chatRoomScheduleId: GraphQLID? {
        get {
          return snapshot["chatRoomScheduleId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct LastMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateChatRoomSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateChatRoom($filter: ModelSubscriptionChatRoomFilterInput) {\n  onUpdateChatRoom(filter: $filter) {\n    __typename\n    id\n    newMessages\n    name\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    LastMessage {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    chatRoomLastMessageId\n    chatRoomScheduleId\n  }\n}"

  public var filter: ModelSubscriptionChatRoomFilterInput?

  public init(filter: ModelSubscriptionChatRoomFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateChatRoom", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateChatRoom: OnUpdateChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateChatRoom": onUpdateChatRoom.flatMap { $0.snapshot }])
    }

    public var onUpdateChatRoom: OnUpdateChatRoom? {
      get {
        return (snapshot["onUpdateChatRoom"] as? Snapshot).flatMap { OnUpdateChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateChatRoom")
      }
    }

    public struct OnUpdateChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoom"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newMessages", type: .scalar(Int.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("LastMessage", type: .object(LastMessage.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("Schedule", type: .object(Schedule.selections)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
        GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newMessages: Int? {
        get {
          return snapshot["newMessages"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "newMessages")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var lastMessage: LastMessage? {
        get {
          return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var schedule: Schedule? {
        get {
          return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
        }
      }

      public var state: String? {
        get {
          return snapshot["state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var chatRoomLastMessageId: GraphQLID? {
        get {
          return snapshot["chatRoomLastMessageId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
        }
      }

      public var chatRoomScheduleId: GraphQLID? {
        get {
          return snapshot["chatRoomScheduleId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct LastMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteChatRoomSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteChatRoom($filter: ModelSubscriptionChatRoomFilterInput) {\n  onDeleteChatRoom(filter: $filter) {\n    __typename\n    id\n    newMessages\n    name\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Users {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    LastMessage {\n      __typename\n      id\n      image\n      status\n      content\n      userID\n      chatroomID\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    state\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n    chatRoomLastMessageId\n    chatRoomScheduleId\n  }\n}"

  public var filter: ModelSubscriptionChatRoomFilterInput?

  public init(filter: ModelSubscriptionChatRoomFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteChatRoom", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteChatRoom.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteChatRoom: OnDeleteChatRoom? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteChatRoom": onDeleteChatRoom.flatMap { $0.snapshot }])
    }

    public var onDeleteChatRoom: OnDeleteChatRoom? {
      get {
        return (snapshot["onDeleteChatRoom"] as? Snapshot).flatMap { OnDeleteChatRoom(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteChatRoom")
      }
    }

    public struct OnDeleteChatRoom: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoom"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("newMessages", type: .scalar(Int.self)),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Users", type: .object(User.selections)),
        GraphQLField("LastMessage", type: .object(LastMessage.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("Schedule", type: .object(Schedule.selections)),
        GraphQLField("state", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
        GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
        self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var newMessages: Int? {
        get {
          return snapshot["newMessages"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "newMessages")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var users: User? {
        get {
          return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Users")
        }
      }

      public var lastMessage: LastMessage? {
        get {
          return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var schedule: Schedule? {
        get {
          return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
        }
      }

      public var state: String? {
        get {
          return snapshot["state"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public var chatRoomLastMessageId: GraphQLID? {
        get {
          return snapshot["chatRoomLastMessageId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
        }
      }

      public var chatRoomScheduleId: GraphQLID? {
        get {
          return snapshot["chatRoomScheduleId"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct LastMessage: GraphQLSelectionSet {
        public static let possibleTypes = ["Message"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(MessageStatus.self)),
          GraphQLField("content", type: .scalar(String.self)),
          GraphQLField("userID", type: .scalar(GraphQLID.self)),
          GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var image: String? {
          get {
            return snapshot["image"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "image")
          }
        }

        public var status: MessageStatus? {
          get {
            return snapshot["status"] as? MessageStatus
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var content: String? {
          get {
            return snapshot["content"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "content")
          }
        }

        public var userId: GraphQLID? {
          get {
            return snapshot["userID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "userID")
          }
        }

        public var chatroomId: GraphQLID? {
          get {
            return snapshot["chatroomID"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatroomID")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnCreateMessageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateMessage($filter: ModelSubscriptionMessageFilterInput) {\n  onCreateMessage(filter: $filter) {\n    __typename\n    id\n    image\n    status\n    content\n    userID\n    chatroomID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageFilterInput?

  public init(filter: ModelSubscriptionMessageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateMessage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateMessage: OnCreateMessage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateMessage": onCreateMessage.flatMap { $0.snapshot }])
    }

    public var onCreateMessage: OnCreateMessage? {
      get {
        return (snapshot["onCreateMessage"] as? Snapshot).flatMap { OnCreateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateMessage")
      }
    }

    public struct OnCreateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("image", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(MessageStatus.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var image: String? {
        get {
          return snapshot["image"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image")
        }
      }

      public var status: MessageStatus? {
        get {
          return snapshot["status"] as? MessageStatus
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnUpdateMessageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateMessage($filter: ModelSubscriptionMessageFilterInput) {\n  onUpdateMessage(filter: $filter) {\n    __typename\n    id\n    image\n    status\n    content\n    userID\n    chatroomID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageFilterInput?

  public init(filter: ModelSubscriptionMessageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateMessage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateMessage: OnUpdateMessage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateMessage": onUpdateMessage.flatMap { $0.snapshot }])
    }

    public var onUpdateMessage: OnUpdateMessage? {
      get {
        return (snapshot["onUpdateMessage"] as? Snapshot).flatMap { OnUpdateMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateMessage")
      }
    }

    public struct OnUpdateMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("image", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(MessageStatus.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var image: String? {
        get {
          return snapshot["image"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image")
        }
      }

      public var status: MessageStatus? {
        get {
          return snapshot["status"] as? MessageStatus
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnDeleteMessageSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteMessage($filter: ModelSubscriptionMessageFilterInput) {\n  onDeleteMessage(filter: $filter) {\n    __typename\n    id\n    image\n    status\n    content\n    userID\n    chatroomID\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionMessageFilterInput?

  public init(filter: ModelSubscriptionMessageFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteMessage", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteMessage.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteMessage: OnDeleteMessage? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteMessage": onDeleteMessage.flatMap { $0.snapshot }])
    }

    public var onDeleteMessage: OnDeleteMessage? {
      get {
        return (snapshot["onDeleteMessage"] as? Snapshot).flatMap { OnDeleteMessage(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteMessage")
      }
    }

    public struct OnDeleteMessage: GraphQLSelectionSet {
      public static let possibleTypes = ["Message"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("image", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(MessageStatus.self)),
        GraphQLField("content", type: .scalar(String.self)),
        GraphQLField("userID", type: .scalar(GraphQLID.self)),
        GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var image: String? {
        get {
          return snapshot["image"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "image")
        }
      }

      public var status: MessageStatus? {
        get {
          return snapshot["status"] as? MessageStatus
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var content: String? {
        get {
          return snapshot["content"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "content")
        }
      }

      public var userId: GraphQLID? {
        get {
          return snapshot["userID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatroomId: GraphQLID? {
        get {
          return snapshot["chatroomID"] as? GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatroomID")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }
    }
  }
}

public final class OnCreateUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateUser($filter: ModelSubscriptionUserFilterInput) {\n  onCreateUser(filter: $filter) {\n    __typename\n    id\n    name\n    patientNumber\n    phoneNumber\n    email\n    status\n    lastOnlineAt\n    schedules {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    chatrooms {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    sex\n    born\n    phoneNOK\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionUserFilterInput?

  public init(filter: ModelSubscriptionUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateUser: OnCreateUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateUser": onCreateUser.flatMap { $0.snapshot }])
    }

    public var onCreateUser: OnCreateUser? {
      get {
        return (snapshot["onCreateUser"] as? Snapshot).flatMap { OnCreateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateUser")
      }
    }

    public struct OnCreateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("patientNumber", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
        GraphQLField("schedules", type: .object(Schedule.selections)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("chatrooms", type: .object(Chatroom.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("sex", type: .scalar(String.self)),
        GraphQLField("born", type: .scalar(String.self)),
        GraphQLField("phoneNOK", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var patientNumber: String? {
        get {
          return snapshot["patientNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "patientNumber")
        }
      }

      public var phoneNumber: String? {
        get {
          return snapshot["phoneNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      public var email: String? {
        get {
          return snapshot["email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var lastOnlineAt: Int? {
        get {
          return snapshot["lastOnlineAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastOnlineAt")
        }
      }

      public var schedules: Schedule? {
        get {
          return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var chatrooms: Chatroom? {
        get {
          return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var sex: String? {
        get {
          return snapshot["sex"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sex")
        }
      }

      public var born: String? {
        get {
          return snapshot["born"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "born")
        }
      }

      public var phoneNok: String? {
        get {
          return snapshot["phoneNOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNOK")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Chatroom: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateUser($filter: ModelSubscriptionUserFilterInput) {\n  onUpdateUser(filter: $filter) {\n    __typename\n    id\n    name\n    patientNumber\n    phoneNumber\n    email\n    status\n    lastOnlineAt\n    schedules {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    chatrooms {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    sex\n    born\n    phoneNOK\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionUserFilterInput?

  public init(filter: ModelSubscriptionUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateUser: OnUpdateUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateUser": onUpdateUser.flatMap { $0.snapshot }])
    }

    public var onUpdateUser: OnUpdateUser? {
      get {
        return (snapshot["onUpdateUser"] as? Snapshot).flatMap { OnUpdateUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateUser")
      }
    }

    public struct OnUpdateUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("patientNumber", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
        GraphQLField("schedules", type: .object(Schedule.selections)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("chatrooms", type: .object(Chatroom.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("sex", type: .scalar(String.self)),
        GraphQLField("born", type: .scalar(String.self)),
        GraphQLField("phoneNOK", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var patientNumber: String? {
        get {
          return snapshot["patientNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "patientNumber")
        }
      }

      public var phoneNumber: String? {
        get {
          return snapshot["phoneNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      public var email: String? {
        get {
          return snapshot["email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var lastOnlineAt: Int? {
        get {
          return snapshot["lastOnlineAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastOnlineAt")
        }
      }

      public var schedules: Schedule? {
        get {
          return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var chatrooms: Chatroom? {
        get {
          return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var sex: String? {
        get {
          return snapshot["sex"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sex")
        }
      }

      public var born: String? {
        get {
          return snapshot["born"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "born")
        }
      }

      public var phoneNok: String? {
        get {
          return snapshot["phoneNOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNOK")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Chatroom: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteUser($filter: ModelSubscriptionUserFilterInput) {\n  onDeleteUser(filter: $filter) {\n    __typename\n    id\n    name\n    patientNumber\n    phoneNumber\n    email\n    status\n    lastOnlineAt\n    schedules {\n      __typename\n      items {\n        __typename\n        id\n        scheduleID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Messages {\n      __typename\n      items {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    Questionnaries {\n      __typename\n      items {\n        __typename\n        id\n        content\n        Q1\n        Q2\n        Q3\n        Q4\n        Q5\n        Q6\n        Q7\n        userID\n        chatroomID\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    chatrooms {\n      __typename\n      items {\n        __typename\n        id\n        chatRoomID\n        userID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    state\n    MySchedules {\n      __typename\n      items {\n        __typename\n        id\n        userID\n        scheduleID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      nextToken\n      startedAt\n    }\n    sex\n    born\n    phoneNOK\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionUserFilterInput?

  public init(filter: ModelSubscriptionUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteUser: OnDeleteUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteUser": onDeleteUser.flatMap { $0.snapshot }])
    }

    public var onDeleteUser: OnDeleteUser? {
      get {
        return (snapshot["onDeleteUser"] as? Snapshot).flatMap { OnDeleteUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteUser")
      }
    }

    public struct OnDeleteUser: GraphQLSelectionSet {
      public static let possibleTypes = ["User"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("name", type: .scalar(String.self)),
        GraphQLField("patientNumber", type: .scalar(String.self)),
        GraphQLField("phoneNumber", type: .scalar(String.self)),
        GraphQLField("email", type: .scalar(String.self)),
        GraphQLField("status", type: .scalar(String.self)),
        GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
        GraphQLField("schedules", type: .object(Schedule.selections)),
        GraphQLField("Messages", type: .object(Message.selections)),
        GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
        GraphQLField("chatrooms", type: .object(Chatroom.selections)),
        GraphQLField("state", type: .scalar(Int.self)),
        GraphQLField("MySchedules", type: .object(MySchedule.selections)),
        GraphQLField("sex", type: .scalar(String.self)),
        GraphQLField("born", type: .scalar(String.self)),
        GraphQLField("phoneNOK", type: .scalar(String.self)),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String? {
        get {
          return snapshot["name"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "name")
        }
      }

      public var patientNumber: String? {
        get {
          return snapshot["patientNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "patientNumber")
        }
      }

      public var phoneNumber: String? {
        get {
          return snapshot["phoneNumber"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNumber")
        }
      }

      public var email: String? {
        get {
          return snapshot["email"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "email")
        }
      }

      public var status: String? {
        get {
          return snapshot["status"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "status")
        }
      }

      public var lastOnlineAt: Int? {
        get {
          return snapshot["lastOnlineAt"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "lastOnlineAt")
        }
      }

      public var schedules: Schedule? {
        get {
          return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
        }
      }

      public var messages: Message? {
        get {
          return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
        }
      }

      public var questionnaries: Questionnary? {
        get {
          return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
        }
      }

      public var chatrooms: Chatroom? {
        get {
          return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
        }
      }

      public var state: Int? {
        get {
          return snapshot["state"] as? Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "state")
        }
      }

      public var mySchedules: MySchedule? {
        get {
          return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
        }
        set {
          snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
        }
      }

      public var sex: String? {
        get {
          return snapshot["sex"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "sex")
        }
      }

      public var born: String? {
        get {
          return snapshot["born"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "born")
        }
      }

      public var phoneNok: String? {
        get {
          return snapshot["phoneNOK"] as? String
        }
        set {
          snapshot.updateValue(newValue, forKey: "phoneNOK")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelScheduleUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ScheduleUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var scheduleId: GraphQLID {
            get {
              return snapshot["scheduleID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Message: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMessageConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMessageConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Questionnary: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelQuestionnarieConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["Questionnarie"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("Q1", type: .scalar(String.self)),
            GraphQLField("Q2", type: .scalar(String.self)),
            GraphQLField("Q3", type: .scalar(String.self)),
            GraphQLField("Q4", type: .scalar(String.self)),
            GraphQLField("Q5", type: .scalar(String.self)),
            GraphQLField("Q6", type: .scalar(String.self)),
            GraphQLField("Q7", type: .list(.scalar(String.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, content: String? = nil, q1: String? = nil, q2: String? = nil, q3: String? = nil, q4: String? = nil, q5: String? = nil, q6: String? = nil, q7: [String?]? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Questionnarie", "id": id, "content": content, "Q1": q1, "Q2": q2, "Q3": q3, "Q4": q4, "Q5": q5, "Q6": q6, "Q7": q7, "userID": userId, "chatroomID": chatroomId, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var q1: String? {
            get {
              return snapshot["Q1"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q1")
            }
          }

          public var q2: String? {
            get {
              return snapshot["Q2"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q2")
            }
          }

          public var q3: String? {
            get {
              return snapshot["Q3"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q3")
            }
          }

          public var q4: String? {
            get {
              return snapshot["Q4"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q4")
            }
          }

          public var q5: String? {
            get {
              return snapshot["Q5"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q5")
            }
          }

          public var q6: String? {
            get {
              return snapshot["Q6"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q6")
            }
          }

          public var q7: [String?]? {
            get {
              return snapshot["Q7"] as? [String?]
            }
            set {
              snapshot.updateValue(newValue, forKey: "Q7")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct Chatroom: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelChatRoomUserConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["ChatRoomUser"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var chatRoomId: GraphQLID {
            get {
              return snapshot["chatRoomID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatRoomID")
            }
          }

          public var userId: GraphQLID {
            get {
              return snapshot["userID"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct MySchedule: GraphQLSelectionSet {
        public static let possibleTypes = ["ModelMyScheduleConnection"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("items", type: .nonNull(.list(.object(Item.selections)))),
          GraphQLField("nextToken", type: .scalar(String.self)),
          GraphQLField("startedAt", type: .scalar(Int.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(items: [Item?], nextToken: String? = nil, startedAt: Int? = nil) {
          self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "items": items.map { $0.flatMap { $0.snapshot } }, "nextToken": nextToken, "startedAt": startedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var items: [Item?] {
          get {
            return (snapshot["items"] as! [Snapshot?]).map { $0.flatMap { Item(snapshot: $0) } }
          }
          set {
            snapshot.updateValue(newValue.map { $0.flatMap { $0.snapshot } }, forKey: "items")
          }
        }

        public var nextToken: String? {
          get {
            return snapshot["nextToken"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "nextToken")
          }
        }

        public var startedAt: Int? {
          get {
            return snapshot["startedAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "startedAt")
          }
        }

        public struct Item: GraphQLSelectionSet {
          public static let possibleTypes = ["MySchedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("scheduleID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, userId: GraphQLID? = nil, scheduleId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "MySchedule", "id": id, "userID": userId, "scheduleID": scheduleId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var scheduleId: GraphQLID? {
            get {
              return snapshot["scheduleID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "scheduleID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnCreateScheduleUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateScheduleUser($filter: ModelSubscriptionScheduleUserFilterInput) {\n  onCreateScheduleUser(filter: $filter) {\n    __typename\n    id\n    scheduleID\n    userID\n    schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionScheduleUserFilterInput?

  public init(filter: ModelSubscriptionScheduleUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateScheduleUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateScheduleUser: OnCreateScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateScheduleUser": onCreateScheduleUser.flatMap { $0.snapshot }])
    }

    public var onCreateScheduleUser: OnCreateScheduleUser? {
      get {
        return (snapshot["onCreateScheduleUser"] as? Snapshot).flatMap { OnCreateScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateScheduleUser")
      }
    }

    public struct OnCreateScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ScheduleUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var scheduleId: GraphQLID {
        get {
          return snapshot["scheduleID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var schedule: Schedule {
        get {
          return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "schedule")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateScheduleUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateScheduleUser($filter: ModelSubscriptionScheduleUserFilterInput) {\n  onUpdateScheduleUser(filter: $filter) {\n    __typename\n    id\n    scheduleID\n    userID\n    schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionScheduleUserFilterInput?

  public init(filter: ModelSubscriptionScheduleUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateScheduleUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateScheduleUser: OnUpdateScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateScheduleUser": onUpdateScheduleUser.flatMap { $0.snapshot }])
    }

    public var onUpdateScheduleUser: OnUpdateScheduleUser? {
      get {
        return (snapshot["onUpdateScheduleUser"] as? Snapshot).flatMap { OnUpdateScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateScheduleUser")
      }
    }

    public struct OnUpdateScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ScheduleUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var scheduleId: GraphQLID {
        get {
          return snapshot["scheduleID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var schedule: Schedule {
        get {
          return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "schedule")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteScheduleUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteScheduleUser($filter: ModelSubscriptionScheduleUserFilterInput) {\n  onDeleteScheduleUser(filter: $filter) {\n    __typename\n    id\n    scheduleID\n    userID\n    schedule {\n      __typename\n      id\n      Reservation\n      ttime\n      time\n      BOOK\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionScheduleUserFilterInput?

  public init(filter: ModelSubscriptionScheduleUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteScheduleUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteScheduleUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteScheduleUser: OnDeleteScheduleUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteScheduleUser": onDeleteScheduleUser.flatMap { $0.snapshot }])
    }

    public var onDeleteScheduleUser: OnDeleteScheduleUser? {
      get {
        return (snapshot["onDeleteScheduleUser"] as? Snapshot).flatMap { OnDeleteScheduleUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteScheduleUser")
      }
    }

    public struct OnDeleteScheduleUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ScheduleUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("scheduleID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("schedule", type: .nonNull(.object(Schedule.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, scheduleId: GraphQLID, userId: GraphQLID, schedule: Schedule, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ScheduleUser", "id": id, "scheduleID": scheduleId, "userID": userId, "schedule": schedule.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var scheduleId: GraphQLID {
        get {
          return snapshot["scheduleID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "scheduleID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var schedule: Schedule {
        get {
          return Schedule(snapshot: snapshot["schedule"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "schedule")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct Schedule: GraphQLSelectionSet {
        public static let possibleTypes = ["Schedule"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("Reservation", type: .scalar(String.self)),
          GraphQLField("ttime", type: .scalar(String.self)),
          GraphQLField("time", type: .scalar(Int.self)),
          GraphQLField("BOOK", type: .scalar(String.self)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, users: User? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "Users": users.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var reservation: String? {
          get {
            return snapshot["Reservation"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "Reservation")
          }
        }

        public var ttime: String? {
          get {
            return snapshot["ttime"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "ttime")
          }
        }

        public var time: Int? {
          get {
            return snapshot["time"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "time")
          }
        }

        public var book: String? {
          get {
            return snapshot["BOOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "BOOK")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnCreateChatRoomUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnCreateChatRoomUser($filter: ModelSubscriptionChatRoomUserFilterInput) {\n  onCreateChatRoomUser(filter: $filter) {\n    __typename\n    id\n    chatRoomID\n    userID\n    chatRoom {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionChatRoomUserFilterInput?

  public init(filter: ModelSubscriptionChatRoomUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onCreateChatRoomUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnCreateChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onCreateChatRoomUser: OnCreateChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onCreateChatRoomUser": onCreateChatRoomUser.flatMap { $0.snapshot }])
    }

    public var onCreateChatRoomUser: OnCreateChatRoomUser? {
      get {
        return (snapshot["onCreateChatRoomUser"] as? Snapshot).flatMap { OnCreateChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onCreateChatRoomUser")
      }
    }

    public struct OnCreateChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var chatRoomId: GraphQLID {
        get {
          return snapshot["chatRoomID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatRoom: ChatRoom {
        get {
          return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct ChatRoom: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnUpdateChatRoomUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnUpdateChatRoomUser($filter: ModelSubscriptionChatRoomUserFilterInput) {\n  onUpdateChatRoomUser(filter: $filter) {\n    __typename\n    id\n    chatRoomID\n    userID\n    chatRoom {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionChatRoomUserFilterInput?

  public init(filter: ModelSubscriptionChatRoomUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onUpdateChatRoomUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnUpdateChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onUpdateChatRoomUser: OnUpdateChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onUpdateChatRoomUser": onUpdateChatRoomUser.flatMap { $0.snapshot }])
    }

    public var onUpdateChatRoomUser: OnUpdateChatRoomUser? {
      get {
        return (snapshot["onUpdateChatRoomUser"] as? Snapshot).flatMap { OnUpdateChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onUpdateChatRoomUser")
      }
    }

    public struct OnUpdateChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var chatRoomId: GraphQLID {
        get {
          return snapshot["chatRoomID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatRoom: ChatRoom {
        get {
          return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct ChatRoom: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}

public final class OnDeleteChatRoomUserSubscription: GraphQLSubscription {
  public static let operationString =
    "subscription OnDeleteChatRoomUser($filter: ModelSubscriptionChatRoomUserFilterInput) {\n  onDeleteChatRoomUser(filter: $filter) {\n    __typename\n    id\n    chatRoomID\n    userID\n    chatRoom {\n      __typename\n      id\n      newMessages\n      name\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Users {\n        __typename\n        nextToken\n        startedAt\n      }\n      LastMessage {\n        __typename\n        id\n        image\n        status\n        content\n        userID\n        chatroomID\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      Schedule {\n        __typename\n        id\n        Reservation\n        ttime\n        time\n        BOOK\n        state\n        createdAt\n        updatedAt\n        _version\n        _deleted\n        _lastChangedAt\n      }\n      state\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n      chatRoomLastMessageId\n      chatRoomScheduleId\n    }\n    user {\n      __typename\n      id\n      name\n      patientNumber\n      phoneNumber\n      email\n      status\n      lastOnlineAt\n      schedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      Messages {\n        __typename\n        nextToken\n        startedAt\n      }\n      Questionnaries {\n        __typename\n        nextToken\n        startedAt\n      }\n      chatrooms {\n        __typename\n        nextToken\n        startedAt\n      }\n      state\n      MySchedules {\n        __typename\n        nextToken\n        startedAt\n      }\n      sex\n      born\n      phoneNOK\n      createdAt\n      updatedAt\n      _version\n      _deleted\n      _lastChangedAt\n    }\n    createdAt\n    updatedAt\n    _version\n    _deleted\n    _lastChangedAt\n  }\n}"

  public var filter: ModelSubscriptionChatRoomUserFilterInput?

  public init(filter: ModelSubscriptionChatRoomUserFilterInput? = nil) {
    self.filter = filter
  }

  public var variables: GraphQLMap? {
    return ["filter": filter]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes = ["Subscription"]

    public static let selections: [GraphQLSelection] = [
      GraphQLField("onDeleteChatRoomUser", arguments: ["filter": GraphQLVariable("filter")], type: .object(OnDeleteChatRoomUser.selections)),
    ]

    public var snapshot: Snapshot

    public init(snapshot: Snapshot) {
      self.snapshot = snapshot
    }

    public init(onDeleteChatRoomUser: OnDeleteChatRoomUser? = nil) {
      self.init(snapshot: ["__typename": "Subscription", "onDeleteChatRoomUser": onDeleteChatRoomUser.flatMap { $0.snapshot }])
    }

    public var onDeleteChatRoomUser: OnDeleteChatRoomUser? {
      get {
        return (snapshot["onDeleteChatRoomUser"] as? Snapshot).flatMap { OnDeleteChatRoomUser(snapshot: $0) }
      }
      set {
        snapshot.updateValue(newValue?.snapshot, forKey: "onDeleteChatRoomUser")
      }
    }

    public struct OnDeleteChatRoomUser: GraphQLSelectionSet {
      public static let possibleTypes = ["ChatRoomUser"]

      public static let selections: [GraphQLSelection] = [
        GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
        GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoomID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("userID", type: .nonNull(.scalar(GraphQLID.self))),
        GraphQLField("chatRoom", type: .nonNull(.object(ChatRoom.selections))),
        GraphQLField("user", type: .nonNull(.object(User.selections))),
        GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
        GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
        GraphQLField("_deleted", type: .scalar(Bool.self)),
        GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
      ]

      public var snapshot: Snapshot

      public init(snapshot: Snapshot) {
        self.snapshot = snapshot
      }

      public init(id: GraphQLID, chatRoomId: GraphQLID, userId: GraphQLID, chatRoom: ChatRoom, user: User, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
        self.init(snapshot: ["__typename": "ChatRoomUser", "id": id, "chatRoomID": chatRoomId, "userID": userId, "chatRoom": chatRoom.snapshot, "user": user.snapshot, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
      }

      public var __typename: String {
        get {
          return snapshot["__typename"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: GraphQLID {
        get {
          return snapshot["id"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "id")
        }
      }

      public var chatRoomId: GraphQLID {
        get {
          return snapshot["chatRoomID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "chatRoomID")
        }
      }

      public var userId: GraphQLID {
        get {
          return snapshot["userID"]! as! GraphQLID
        }
        set {
          snapshot.updateValue(newValue, forKey: "userID")
        }
      }

      public var chatRoom: ChatRoom {
        get {
          return ChatRoom(snapshot: snapshot["chatRoom"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "chatRoom")
        }
      }

      public var user: User {
        get {
          return User(snapshot: snapshot["user"]! as! Snapshot)
        }
        set {
          snapshot.updateValue(newValue.snapshot, forKey: "user")
        }
      }

      public var createdAt: String {
        get {
          return snapshot["createdAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String {
        get {
          return snapshot["updatedAt"]! as! String
        }
        set {
          snapshot.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var version: Int {
        get {
          return snapshot["_version"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_version")
        }
      }

      public var deleted: Bool? {
        get {
          return snapshot["_deleted"] as? Bool
        }
        set {
          snapshot.updateValue(newValue, forKey: "_deleted")
        }
      }

      public var lastChangedAt: Int {
        get {
          return snapshot["_lastChangedAt"]! as! Int
        }
        set {
          snapshot.updateValue(newValue, forKey: "_lastChangedAt")
        }
      }

      public struct ChatRoom: GraphQLSelectionSet {
        public static let possibleTypes = ["ChatRoom"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("newMessages", type: .scalar(Int.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Users", type: .object(User.selections)),
          GraphQLField("LastMessage", type: .object(LastMessage.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("Schedule", type: .object(Schedule.selections)),
          GraphQLField("state", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          GraphQLField("chatRoomLastMessageId", type: .scalar(GraphQLID.self)),
          GraphQLField("chatRoomScheduleId", type: .scalar(GraphQLID.self)),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, newMessages: Int? = nil, name: String? = nil, messages: Message? = nil, users: User? = nil, lastMessage: LastMessage? = nil, questionnaries: Questionnary? = nil, schedule: Schedule? = nil, state: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int, chatRoomLastMessageId: GraphQLID? = nil, chatRoomScheduleId: GraphQLID? = nil) {
          self.init(snapshot: ["__typename": "ChatRoom", "id": id, "newMessages": newMessages, "name": name, "Messages": messages.flatMap { $0.snapshot }, "Users": users.flatMap { $0.snapshot }, "LastMessage": lastMessage.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "Schedule": schedule.flatMap { $0.snapshot }, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt, "chatRoomLastMessageId": chatRoomLastMessageId, "chatRoomScheduleId": chatRoomScheduleId])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var newMessages: Int? {
          get {
            return snapshot["newMessages"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "newMessages")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var users: User? {
          get {
            return (snapshot["Users"] as? Snapshot).flatMap { User(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Users")
          }
        }

        public var lastMessage: LastMessage? {
          get {
            return (snapshot["LastMessage"] as? Snapshot).flatMap { LastMessage(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "LastMessage")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var schedule: Schedule? {
          get {
            return (snapshot["Schedule"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Schedule")
          }
        }

        public var state: String? {
          get {
            return snapshot["state"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public var chatRoomLastMessageId: GraphQLID? {
          get {
            return snapshot["chatRoomLastMessageId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomLastMessageId")
          }
        }

        public var chatRoomScheduleId: GraphQLID? {
          get {
            return snapshot["chatRoomScheduleId"] as? GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "chatRoomScheduleId")
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct User: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct LastMessage: GraphQLSelectionSet {
          public static let possibleTypes = ["Message"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("status", type: .scalar(MessageStatus.self)),
            GraphQLField("content", type: .scalar(String.self)),
            GraphQLField("userID", type: .scalar(GraphQLID.self)),
            GraphQLField("chatroomID", type: .scalar(GraphQLID.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, image: String? = nil, status: MessageStatus? = nil, content: String? = nil, userId: GraphQLID? = nil, chatroomId: GraphQLID? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Message", "id": id, "image": image, "status": status, "content": content, "userID": userId, "chatroomID": chatroomId, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var image: String? {
            get {
              return snapshot["image"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "image")
            }
          }

          public var status: MessageStatus? {
            get {
              return snapshot["status"] as? MessageStatus
            }
            set {
              snapshot.updateValue(newValue, forKey: "status")
            }
          }

          public var content: String? {
            get {
              return snapshot["content"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "content")
            }
          }

          public var userId: GraphQLID? {
            get {
              return snapshot["userID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "userID")
            }
          }

          public var chatroomId: GraphQLID? {
            get {
              return snapshot["chatroomID"] as? GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "chatroomID")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["Schedule"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
            GraphQLField("Reservation", type: .scalar(String.self)),
            GraphQLField("ttime", type: .scalar(String.self)),
            GraphQLField("time", type: .scalar(Int.self)),
            GraphQLField("BOOK", type: .scalar(String.self)),
            GraphQLField("state", type: .scalar(Int.self)),
            GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
            GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
            GraphQLField("_deleted", type: .scalar(Bool.self)),
            GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(id: GraphQLID, reservation: String? = nil, ttime: String? = nil, time: Int? = nil, book: String? = nil, state: Int? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
            self.init(snapshot: ["__typename": "Schedule", "id": id, "Reservation": reservation, "ttime": ttime, "time": time, "BOOK": book, "state": state, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: GraphQLID {
            get {
              return snapshot["id"]! as! GraphQLID
            }
            set {
              snapshot.updateValue(newValue, forKey: "id")
            }
          }

          public var reservation: String? {
            get {
              return snapshot["Reservation"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "Reservation")
            }
          }

          public var ttime: String? {
            get {
              return snapshot["ttime"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "ttime")
            }
          }

          public var time: Int? {
            get {
              return snapshot["time"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "time")
            }
          }

          public var book: String? {
            get {
              return snapshot["BOOK"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "BOOK")
            }
          }

          public var state: Int? {
            get {
              return snapshot["state"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "state")
            }
          }

          public var createdAt: String {
            get {
              return snapshot["createdAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String {
            get {
              return snapshot["updatedAt"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "updatedAt")
            }
          }

          public var version: Int {
            get {
              return snapshot["_version"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_version")
            }
          }

          public var deleted: Bool? {
            get {
              return snapshot["_deleted"] as? Bool
            }
            set {
              snapshot.updateValue(newValue, forKey: "_deleted")
            }
          }

          public var lastChangedAt: Int {
            get {
              return snapshot["_lastChangedAt"]! as! Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "_lastChangedAt")
            }
          }
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes = ["User"]

        public static let selections: [GraphQLSelection] = [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(GraphQLID.self))),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("patientNumber", type: .scalar(String.self)),
          GraphQLField("phoneNumber", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(String.self)),
          GraphQLField("lastOnlineAt", type: .scalar(Int.self)),
          GraphQLField("schedules", type: .object(Schedule.selections)),
          GraphQLField("Messages", type: .object(Message.selections)),
          GraphQLField("Questionnaries", type: .object(Questionnary.selections)),
          GraphQLField("chatrooms", type: .object(Chatroom.selections)),
          GraphQLField("state", type: .scalar(Int.self)),
          GraphQLField("MySchedules", type: .object(MySchedule.selections)),
          GraphQLField("sex", type: .scalar(String.self)),
          GraphQLField("born", type: .scalar(String.self)),
          GraphQLField("phoneNOK", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("updatedAt", type: .nonNull(.scalar(String.self))),
          GraphQLField("_version", type: .nonNull(.scalar(Int.self))),
          GraphQLField("_deleted", type: .scalar(Bool.self)),
          GraphQLField("_lastChangedAt", type: .nonNull(.scalar(Int.self))),
        ]

        public var snapshot: Snapshot

        public init(snapshot: Snapshot) {
          self.snapshot = snapshot
        }

        public init(id: GraphQLID, name: String? = nil, patientNumber: String? = nil, phoneNumber: String? = nil, email: String? = nil, status: String? = nil, lastOnlineAt: Int? = nil, schedules: Schedule? = nil, messages: Message? = nil, questionnaries: Questionnary? = nil, chatrooms: Chatroom? = nil, state: Int? = nil, mySchedules: MySchedule? = nil, sex: String? = nil, born: String? = nil, phoneNok: String? = nil, createdAt: String, updatedAt: String, version: Int, deleted: Bool? = nil, lastChangedAt: Int) {
          self.init(snapshot: ["__typename": "User", "id": id, "name": name, "patientNumber": patientNumber, "phoneNumber": phoneNumber, "email": email, "status": status, "lastOnlineAt": lastOnlineAt, "schedules": schedules.flatMap { $0.snapshot }, "Messages": messages.flatMap { $0.snapshot }, "Questionnaries": questionnaries.flatMap { $0.snapshot }, "chatrooms": chatrooms.flatMap { $0.snapshot }, "state": state, "MySchedules": mySchedules.flatMap { $0.snapshot }, "sex": sex, "born": born, "phoneNOK": phoneNok, "createdAt": createdAt, "updatedAt": updatedAt, "_version": version, "_deleted": deleted, "_lastChangedAt": lastChangedAt])
        }

        public var __typename: String {
          get {
            return snapshot["__typename"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: GraphQLID {
          get {
            return snapshot["id"]! as! GraphQLID
          }
          set {
            snapshot.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String? {
          get {
            return snapshot["name"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "name")
          }
        }

        public var patientNumber: String? {
          get {
            return snapshot["patientNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "patientNumber")
          }
        }

        public var phoneNumber: String? {
          get {
            return snapshot["phoneNumber"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNumber")
          }
        }

        public var email: String? {
          get {
            return snapshot["email"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "email")
          }
        }

        public var status: String? {
          get {
            return snapshot["status"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "status")
          }
        }

        public var lastOnlineAt: Int? {
          get {
            return snapshot["lastOnlineAt"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "lastOnlineAt")
          }
        }

        public var schedules: Schedule? {
          get {
            return (snapshot["schedules"] as? Snapshot).flatMap { Schedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "schedules")
          }
        }

        public var messages: Message? {
          get {
            return (snapshot["Messages"] as? Snapshot).flatMap { Message(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Messages")
          }
        }

        public var questionnaries: Questionnary? {
          get {
            return (snapshot["Questionnaries"] as? Snapshot).flatMap { Questionnary(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "Questionnaries")
          }
        }

        public var chatrooms: Chatroom? {
          get {
            return (snapshot["chatrooms"] as? Snapshot).flatMap { Chatroom(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "chatrooms")
          }
        }

        public var state: Int? {
          get {
            return snapshot["state"] as? Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "state")
          }
        }

        public var mySchedules: MySchedule? {
          get {
            return (snapshot["MySchedules"] as? Snapshot).flatMap { MySchedule(snapshot: $0) }
          }
          set {
            snapshot.updateValue(newValue?.snapshot, forKey: "MySchedules")
          }
        }

        public var sex: String? {
          get {
            return snapshot["sex"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "sex")
          }
        }

        public var born: String? {
          get {
            return snapshot["born"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "born")
          }
        }

        public var phoneNok: String? {
          get {
            return snapshot["phoneNOK"] as? String
          }
          set {
            snapshot.updateValue(newValue, forKey: "phoneNOK")
          }
        }

        public var createdAt: String {
          get {
            return snapshot["createdAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String {
          get {
            return snapshot["updatedAt"]! as! String
          }
          set {
            snapshot.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var version: Int {
          get {
            return snapshot["_version"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_version")
          }
        }

        public var deleted: Bool? {
          get {
            return snapshot["_deleted"] as? Bool
          }
          set {
            snapshot.updateValue(newValue, forKey: "_deleted")
          }
        }

        public var lastChangedAt: Int {
          get {
            return snapshot["_lastChangedAt"]! as! Int
          }
          set {
            snapshot.updateValue(newValue, forKey: "_lastChangedAt")
          }
        }

        public struct Schedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelScheduleUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelScheduleUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Message: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMessageConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMessageConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Questionnary: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelQuestionnarieConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelQuestionnarieConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct Chatroom: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelChatRoomUserConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelChatRoomUserConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }

        public struct MySchedule: GraphQLSelectionSet {
          public static let possibleTypes = ["ModelMyScheduleConnection"]

          public static let selections: [GraphQLSelection] = [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("nextToken", type: .scalar(String.self)),
            GraphQLField("startedAt", type: .scalar(Int.self)),
          ]

          public var snapshot: Snapshot

          public init(snapshot: Snapshot) {
            self.snapshot = snapshot
          }

          public init(nextToken: String? = nil, startedAt: Int? = nil) {
            self.init(snapshot: ["__typename": "ModelMyScheduleConnection", "nextToken": nextToken, "startedAt": startedAt])
          }

          public var __typename: String {
            get {
              return snapshot["__typename"]! as! String
            }
            set {
              snapshot.updateValue(newValue, forKey: "__typename")
            }
          }

          public var nextToken: String? {
            get {
              return snapshot["nextToken"] as? String
            }
            set {
              snapshot.updateValue(newValue, forKey: "nextToken")
            }
          }

          public var startedAt: Int? {
            get {
              return snapshot["startedAt"] as? Int
            }
            set {
              snapshot.updateValue(newValue, forKey: "startedAt")
            }
          }
        }
      }
    }
  }
}